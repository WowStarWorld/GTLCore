package org.gtlcore.gtlcore.common.data.machines;

import org.gtlcore.gtlcore.GTLCore;
import org.gtlcore.gtlcore.api.machine.multiblock.*;
import org.gtlcore.gtlcore.api.pattern.GTLPredicates;
import org.gtlcore.gtlcore.common.data.*;
import org.gtlcore.gtlcore.common.machine.multiblock.electric.AlloyBlastSmelterMachine;
import org.gtlcore.gtlcore.common.machine.multiblock.steam.LargeSteamParallelMultiblockMachine;
import org.gtlcore.gtlcore.common.machine.multiblock.steam.largeSteamCircuitAssemblerMachine;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.capability.recipe.ItemRecipeCapability;
import com.gregtechceu.gtceu.api.data.RotationState;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.machine.multiblock.WorkableElectricMultiblockMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.api.recipe.GTRecipe;
import com.gregtechceu.gtceu.api.recipe.OverclockingLogic;
import com.gregtechceu.gtceu.api.recipe.RecipeHelper;
import com.gregtechceu.gtceu.common.data.*;
import com.gregtechceu.gtceu.common.machine.multiblock.steam.LargeBoilerMachine;
import com.gregtechceu.gtceu.utils.FormattingUtil;

import net.minecraft.ChatFormatting;
import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.Style;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DirectionalBlock;
import net.minecraft.world.level.material.Fluids;

import com.hepdd.gtmthings.data.CustomMachines;

import static org.gtlcore.gtlcore.api.registries.GTLRegistration.REGISTRATE;

@SuppressWarnings("unused")
public class MultiBlockMachineA {

    public static void init() {
        MultiBlockMachineB.init();
        hugeMultiBlockMachineA.init();
        hugeMultiBlockMachineB.init();
        MagicMultiblock.init();
    }

    public final static MultiblockMachineDefinition PLASMA_CONDENSER = REGISTRATE.multiblock("plasma_condenser", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.PLASMA_CONDENSER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.plasma_condenser")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       ", "       ", "  aaa  ", "  aaa  ", "  aaa  ", "       ", "       ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("  aaa  ", " aabaa ", "aabcbaa", "abcccba", "aabcbaa", " aabaa ", "  aaa  ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("       ", "       ", "  aaa  ", "  ada  ", "  aaa  ", "       ", "       ")
                    .where("a", Predicates.blocks(GTLBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get())
                            .setMinGlobalLimited(120)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("b", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("c", Predicates.blocks(GTLBlocks.LASER_COOLING_CASING.get()))
                    .where("d", Predicates.controller(Predicates.blocks(definition.get())))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/antifreeze_heatproof_machine_casing"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    public final static MultiblockMachineDefinition RARE_EARTH_CENTRIFUGAL = REGISTRATE.multiblock("rare_earth_centrifugal", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.rare_earth_centrifugal")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_HSSE_STURDY)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle(" bbb ", "bbbbb", "bbbbb", "bbbbb", " bbb ")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcdcb", "bcdcb", "bcdcb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle(" bbb ", "bbbbb", "bbabb", "bbbbb", " bbb ")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .setMinGlobalLimited(80)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("d", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public final static MultiblockMachineDefinition ADVANCED_RARE_EARTH_CENTRIFUGAL = REGISTRATE.multiblock("advanced_rare_earth_centrifugal", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.rare_earth_centrifugal")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.SPS_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "        AAA B DDDDDDD B~", "        AAA B EEEEEE  Bb", "        AAA C EEGGGEE C ", "        AAA B EF G FE B ", "        AAA B EF G FE B ", "        AAA C EF G FE C ", "        AAA B EEGGGEE B ", "        AAA B EEEGEEE B ", "        AAA     AGD     ", "        AAA    AAA      ", "    IIIIAAAAAAAA        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.SPS_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.ADVANCED_FUSION_COIL.get()))
                    .where("D", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("F", Predicates.blocks(GTLBlocks.HYPER_CORE.get()))
                    .where("G", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("H", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("I", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where("b", Predicates.blocks(GTLBlocks.SPS_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public final static MultiblockMachineDefinition SLAUGHTERHOUSE = REGISTRATE.multiblock("magic_manufacturer", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.MAGIC_MANUFACTURER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.magic_manufacturer")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.MACHINE_CASING_UIV)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "ccccccccc", "         ", "         ")
                    .aisle("bbbbbbbbb", "cdddddddc", "         ", "         ")
                    .aisle("bbbbbbbbb", "cdeeeeedc", "         ", "         ")
                    .aisle("bbbbbbbbb", "cdefffedc", "   ggg   ", "         ")
                    .aisle("bbbbbbbbb", "cdefifedc", "   ggg   ", "    h    ")
                    .aisle("bbbbbbbbb", "cdefffedc", "   ggg   ", "         ")
                    .aisle("bbbbbbbbb", "cdeeeeedc", "         ", "         ")
                    .aisle("bbbbbbbbb", "cdddddddc", "         ", "         ")
                    .aisle("bbbbabbbb", "ccccccccc", "         ", "         ")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.MACHINE_CASING_UIV.get())
                            .setMinGlobalLimited(70)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(Blocks.PURPLE_CANDLE))
                    .where("d", Predicates.blocks(Blocks.CRYING_OBSIDIAN))
                    .where("e", Predicates.blocks(GTLBlocks.HYPER_CORE.get()))
                    .where("f", Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                    .where("g", Predicates.blocks(Blocks.NETHERITE_BLOCK))
                    .where("h", Predicates.blocks(Blocks.BEACON))
                    .where("i", Predicates.blocks(GTLBlocks.MAGIC_CORE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uiv/side"), GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public final static MultiblockMachineDefinition SPS_CRAFTING = REGISTRATE.multiblock("sps_crafting", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.SPS_CRAFTING_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.sps_crafting")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.FUSION_CASING_MK2)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbbbb", "bcccccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c ded c", "f ded f", "f dgd f", "f ded f", "c ded c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bbbbbbb", "bccaccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.SPS_CASING.get()))
                    .where("c", Predicates.blocks(GTBlocks.FUSION_CASING_MK2.get())
                            .setMinGlobalLimited(100)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("d", Predicates.blocks(Blocks.CRYING_OBSIDIAN))
                    .where("e", Predicates.blocks(Blocks.REINFORCED_DEEPSLATE))
                    .where("f", Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where("g", Predicates.blocks(GTLBlocks.MAGIC_CORE.get()))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public final static MultiblockMachineDefinition ADVANCED_SPS_CRAFTING = REGISTRATE.multiblock("advanced_sps_crafting", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.SPS_CRAFTING_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.sps_crafting")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.FUSION_CASING_MK2)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFIIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBGBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM EEEEEEJEEEEEE MMMMMMM~", " ACCCCCCC B     J     B CCCCCCCA", "  AAEEENN B   F J F   B NNEEEAA ", "       NN B     J     B NN      ", "       NN B   F J F   B NN      ", "       NNAEEEEEEJEEEEEEANN      ", "        NABB  F J F  BBAN       ", "        NABB    J    BBAN       ", "           B LLLJLLL B          ", "           B L  J  L B          ", "           B L  J  L B          ", "           B LLLJLLL B          ", "           BB   J   BB          ", "           EBB  K  BBE          ", "            EEKKKKKEE           ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBBBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFAIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.SPS_CASING.get())
                            .setMinGlobalLimited(800)
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTLBlocks.FUSION_CASING_MK4.get()))
                    .where("C", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("D", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("E", Predicates.blocks(GTLBlocks.NEUTRONIUM_ACTIVE_CASING.get()))
                    .where("F", Predicates.blocks(Blocks.CRYING_OBSIDIAN))
                    .where("G", Predicates.blocks(GTLBlocks.ACCELERATED_PIPELINE.get()))
                    .where("H", Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where("I", Predicates.blocks(GCyMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where("J", Predicates.blocks(GTLBlocks.MAGIC_CORE.get()))
                    .where("K", Predicates.blocks(GTLBlocks.NEUTRONIUM_CASING.get()))
                    .where("L", Predicates.blocks(GTLBlocks.FUSION_COIL_MK2.get()))
                    .where("M", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("N", Predicates.blocks(GTLBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public final static MultiblockMachineDefinition MATTER_FABRICATOR = REGISTRATE.multiblock("matter_fabricator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.MATTER_FABRICATOR_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.matter_fabricator")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.HIGH_POWER_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbb", "bbbbb", "bbbbb", "bbbbb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcdcb", "bcdcb", "bcdcb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bbbbb", "bbabb", "bbbbb", "bbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .setMinGlobalLimited(90)
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where("d", Predicates.blocks(GCyMBlocks.ELECTROLYTIC_CELL.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition VOID_FLUID_DRILLING_RIG = REGISTRATE.multiblock("void_fluid_drilling_rig", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.VOID_FLUID_DRILLING_RIG_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.void_fluid_drilling_rig")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_HSSE_STURDY)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("XXX", "#F#", "#F#", "#F#", "###", "###", "###")
                    .aisle("XXX", "FCF", "FCF", "FCF", "#F#", "#F#", "#F#")
                    .aisle("XSX", "#F#", "#F#", "#F#", "###", "###", "###")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("X", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("C", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("F", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSG)))
                    .where("#", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/fluid_drilling_rig"))
            .register();

    public final static MultiblockMachineDefinition VOID_MINER = REGISTRATE.multiblock("void_miner", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.VOID_MINER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.void_miner")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_TITANIUM_STABLE)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("XXX", "#F#", "#F#", "#F#", "###", "###", "###")
                    .aisle("XXX", "FCF", "FCF", "FCF", "#F#", "#F#", "#F#")
                    .aisle("XSX", "#F#", "#F#", "#F#", "###", "###", "###")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("X", Predicates.blocks(GTBlocks.CASING_TITANIUM_STABLE.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("C", Predicates.blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where("F", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Titanium)))
                    .where("#", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_stable_titanium"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public final static MultiblockMachineDefinition LARGE_VOID_MINER = REGISTRATE.multiblock("large_void_miner", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.LARGE_VOID_MINER_RECIPES)
            .recipeType(GTLRecipeTypes.RANDOM_ORE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.large_void_miner.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.large_void_miner.tooltip.1"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.large_void_miner"), Component.translatable("gtceu.random_ore")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "bbbbbbbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b  d d  b", "b  d d  b", "   d d   ", "  d   d  ", "  d   d  ", "bdd   ddb", "cd     dc", "cd     dc", " d     d ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("bbbbbbbbb", "bbbbabbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .setMinGlobalLimited(110)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where("d", Predicates.blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public final static MultiblockMachineDefinition CHEMICAL_PLANT = REGISTRATE.multiblock("chemical_plant", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.LARGE_CHEMICAL_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtlcore.machine.chemical_plant.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.large_chemical_reactor")))
            .recipeModifier(GTLRecipeModifiers::chemicalPlantOverclock)
            .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("b   b", "bbbbb", "b   b", "bbbbb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "bdddb", "bcccb", "bdddb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "abbbb", "b   b", "bbbbb", "b   b")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.heatingCoils())
                    .where("d", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition DECAY_HASTENER = REGISTRATE.multiblock("decay_hastener", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DECAY_HASTENER_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.decay_hastener")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.HYPER_MECHANICAL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbb", "bbbbb", "bbbbb", "bbbbb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcdcb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bbbbb", "bbabb", "bbbbb", "bbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get())
                            .setMinGlobalLimited(80)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.FUSION_CASING.get()))
                    .where("d", Predicates.blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/data_bank"))
            .register();

    public final static MultiblockMachineDefinition LARGE_RECYCLER = REGISTRATE.multiblock("large_recycler", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.LARGE_RECYCLER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.large_recycler.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.large_recycler")))
            .recipeModifiers((machine, recipe, params, result) -> GTRecipeModifiers.accurateParallel(machine, recipe, (int) Math.pow(4, (((WorkableElectricMultiblockMachine) machine).getTier() - 4)), false).getFirst(), GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.STEEL_HULL)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbb", "bbb", "bbb")
                    .aisle("bbb", "bcb", "bbb")
                    .aisle("bbb", "bab", "bbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.STEEL_HULL.get())
                            .setMinGlobalLimited(14)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed()) {
                    components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal(FormattingUtil.formatNumbers(Math.pow(4, (((WorkableElectricMultiblockMachine) controller).getTier() - 4)))).withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/steam/steel/side"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public final static MultiblockMachineDefinition MASS_FABRICATOR = REGISTRATE.multiblock("mass_fabricator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.MASS_FABRICATOR_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.mass_fabricator")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.MACHINE_CASING_UHV)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbbbb", " c c ", " c c ", " c c ", "bbbbb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbabb", " c c ", " c c ", " c c ", "bbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.MACHINE_CASING_UHV.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(16).setPreviewCount(16))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("d", Predicates.blocks(GTLBlocks.HYPER_CORE.get()))
                    .where("e", Predicates.blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where("f", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uhv/side"), GTCEu.id("block/multiblock/gcym/large_electrolyzer"))
            .register();

    public final static MultiblockMachineDefinition A_MASS_FABRICATOR = REGISTRATE.multiblock("a_mass_fabricator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.MASS_FABRICATOR_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.5))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.mass_fabricator")))
            .recipeModifiers((machine, recipe, params, result) -> GTLRecipeModifiers.reduction(machine, recipe, 0.8, 0.5), GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.MACHINE_CASING_UXV)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAAAA", "           ", "           ", "           ", "           ", "           ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " AAAAAAAAA ", " AAAAAAAAA ", " AAAAAAAAA ", " AAAAAAAAA ", " AAAAAAAAA ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " BC D D CB ", " BC DED CB ", " BC EFE CB ", " BC DED CB ", " BC D D CB ", "AAAAAAAAAAA")
                    .aisle("AAAAAAAAAAA", " AAIIIIIAA ", " AAIIIIIAA ", " AAIIIIIAA ", " AAIIIIIAA ", " AAIIIIIAA ", "AAAAAAAAAAA")
                    .aisle("AAAAASAAAAA", "           ", "           ", "           ", "           ", "           ", "AAAAAAAAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.MACHINE_CASING_UXV.get()))
                    .where("I", Predicates.blocks(GTBlocks.MACHINE_CASING_UXV.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTLBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where("C", Predicates.blocks(GTLBlocks.COIL_TITANSTEEL.get()))
                    .where("D", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where("E", Predicates.blocks(GTLBlocks.HOLLOW_CASING.get()))
                    .where("F", Predicates.blocks(GTLBlocks.HYPER_CORE.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uxv/side"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition PRECISION_ASSEMBLER = REGISTRATE.multiblock("precision_assembler", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .recipeType(GTRecipeTypes.ASSEMBLER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.precision_assembler"), Component.translatable("gtceu.assembler")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bbbbbbbbb", "b-------b", "b-------b", "b-------b", "bbbbbbbbb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bbbbabbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .setMinGlobalLimited(90)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where("d", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTLMaterials.HastelloyN)))
                    .where("-", Predicates.air())
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public final static MultiblockMachineDefinition FISHING_GROUND = REGISTRATE.multiblock("fishing_ground", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.FISHING_GROUND_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.fishing_ground")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.ALUMINIUM_BRONZE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "bbbbbbbbb", "bbbbbbbbb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbbbbbb", "bcccccccb", "bcccccccb")
                    .aisle("bbbbabbbb", "bbbbbbbbb", "bbbbbbbbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.ALUMINIUM_BRONZE_CASING.get())
                            .setMinGlobalLimited(60)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.fluids(Fluids.WATER))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/aluminium_bronze_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public final static MultiblockMachineDefinition LAVA_FURNACE = REGISTRATE.multiblock("lava_furnace", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .recipeType(GTLRecipeTypes.LAVA_FURNACE_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.lava_furnace")))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("CCC", "DDD", "DDD")
                    .aisle("CCC", "D D", "DMD")
                    .aisle("CCC", "DAD", "DDD")
                    .where("A", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes())))
                    .where("M", Predicates.abilities(PartAbility.MUFFLER))
                    .where("C", Predicates.blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    public final static MultiblockMachineDefinition LARGE_GAS_COLLECTOR = REGISTRATE.multiblock("large_gas_collector", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NONE)
            .allowExtendedFacing(false)
            .allowFlip(false)
            .recipeType(GTLRecipeTypes.LARGE_GAS_COLLECTOR_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.large_gas_collector.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.large_gas_collector")))
            .recipeModifiers((machine, recipe, params, result) -> GTRecipeModifiers.accurateParallel(machine, recipe, 100000, false).getFirst(), GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "bcccb", "bcecb", "bcccb", "abdba")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .where("d", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("a", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(40)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("b", Predicates.blocks(GTBlocks.CASING_GRATE.get()))
                    .where("e", Predicates.blocks(GTBlocks.HERMETIC_CASING_IV.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/machines/gas_collector"))
            .register();

    public final static MultiblockMachineDefinition AGGREGATION_DEVICE = REGISTRATE.multiblock("aggregation_device", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.AGGREGATION_DEVICE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.aggregation_device.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.aggregation_device")))
            .recipeModifiers((machine, recipe, params, result) -> GTRecipeModifiers.accurateParallel(machine, recipe, (int) Math.pow(2, (((WorkableElectricMultiblockMachine) machine).getTier() - GTValues.UEV)), false).getFirst(), GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.FUSION_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "      c c      ", "c     c c     c", "c  d  cdc  d  c", "c     c c     c", "      c c      ", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "c     c c     c", "cdddddddddddddc", "idddddddddddddi", "cdddddddddddddc", "c     c c     c", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "c  d  cdc  d  c", "idddddddddddddi", "ieeeeeeeeeeeeeg", "idddddddddddddi", "c  d  cdc  d  c", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "c     c c     c", "cdddddddddddddc", "idddddddddddddi", "cdddddddddddddc", "c     c c     c", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "      c c      ", "c     c c     c", "c  d  cdc  d  c", "c     c c     c", "      c c      ", "a  b  ccc  b  a")
                    .aisle("a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  c~c  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a", "a  b  ccc  b  a")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("c", Predicates.blocks(GTBlocks.FUSION_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(32).setPreviewCount(32)))
                    .where("d", Predicates.blocks(GTBlocks.FUSION_CASING_MK3.get()))
                    .where("b", Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                    .where("e", Predicates.blocks(GTLBlocks.AGGREGATIONE_CORE.get()))
                    .where("a", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahEnriched)))
                    .where("i", Predicates.blocks(GTMachines.ITEM_IMPORT_BUS[0].get()).or(Predicates.blocks(CustomMachines.HUGE_ITEM_IMPORT_BUS[0].getBlock())))
                    .where("g", Predicates.abilities(PartAbility.EXPORT_ITEMS))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed()) {
                    components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal(FormattingUtil.formatNumbers(Math.pow(2, (((WorkableElectricMultiblockMachine) controller).getTier() - GTValues.UEV)))).withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition ENGRAVING_LASER_PLANT = REGISTRATE.multiblock("engraving_laser_plant", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.PRECISION_LASER_ENGRAVER_RECIPES)
            .recipeType(GTRecipeTypes.LASER_ENGRAVER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.engraving_laser_plant.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.precision_laser_engraver"), Component.translatable("gtceu.laser_engraver")))
            .recipeModifiers((machine, recipe, params, result) -> {
                if (machine instanceof WorkableElectricMultiblockMachine workableElectricMultiblockMachine && workableElectricMultiblockMachine.getRecipeType() == GTRecipeTypes.LASER_ENGRAVER_RECIPES) {
                    return GTRecipeModifiers.hatchParallel(workableElectricMultiblockMachine, recipe, false, params, result);
                }
                return recipe;
            }, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("       aaaaaaa       ", "       aaaaaaa       ", "       aaa~aaa       ", "       aaaaaaa       ", "        aaaaa        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  ADDDA JDIDJ ADDDA  ", "  A I A A   A A I A  ", "  A I A  AAA  A I A  ", "  A I A   B   A I A  ", "  ADDDA       ADDDA  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("       AAAAAAA       ", "       JADIDAJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB I BDJ ABBBA", "AD DA ABDIIIDBA AD DA", "AD DAIIAB I BAIIAD DA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AH I HA  ALLLA", " AAACCCCH I HCCCCAAA ", "        H I H        ", "        H I H        ", "        HAAAH        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("       AAAAAAA       ", "       JJDDDJJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "          C          ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA   AAA   AAA   ", "   FAF   JJJ   FAF   ", "   FAF   AAA   FAF   ", "   FAF    I    FAF   ", "   FAF         FAF   ", "   FAF         FAF   ", "   AAA    C    AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA       AAAAA  ", "  FHDHF       FEDEF  ", "  FH HF       FE EF  ", "  FH HF   I   FE EF  ", "  FH HF       FE EF  ", "  FHDHF       FEDEF  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA  AAA  AAAAA  ", "  ADDDA  AAA  ADDDA  ", "  A I A  AAA  A I A  ", "  A I AIIAAAIIA I A  ", "  A I A  AAA  A I A  ", "  ADDDA  AAA  ADDDA  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FHDHF ABBBA FEDEF  ", "  FH HF ACDCA FE EF  ", "  FH HF ACDCA FE EF  ", "  FH HF ABBBA FE EF  ", "  FHDHF AEEEA FEDEF  ", "  ABBBA  AAA  ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  GBBBG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GBBBG  FAF   ", "   FAF  AEEEA  FAF   ", "   AAA   AAA   AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        ABBBA        ", "        ACDCA        ", "        ACDCA        ", "        ABBBA        ", "        AEEEA        ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("B", Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where("D", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("E", Predicates.blocks(GTLBlocks.COMPONENT_ASSEMBLY_LINE_CASING_UV.get()))
                    .where("F", Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where("G", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("H", Predicates.blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where("I", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("J", Predicates.blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where("K", Predicates.blocks(GTLBlocks.ADVANCED_COMPRESSED_FUSION_COIL.get()))
                    .where("L", Predicates.blocks(GCyMBlocks.ELECTROLYTIC_CELL.get()))
                    .where("M", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("a", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_engraving_laser"))
            .register();

    public final static MultiblockMachineDefinition MEGA_ALLOY_BLAST_SMELTER = REGISTRATE.multiblock("mega_alloy_blast_smelter", AlloyBlastSmelterMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeModifiers(GTLRecipeModifiers.GCYM_REDUCTION, GTRecipeModifiers.PARALLEL_HATCH, AlloyBlastSmelterMachine::recipeModifier)
            .appearanceBlock(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .recipeType(GCyMRecipeTypes.ALLOY_BLAST_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtlcore.machine.alloy_blast_smelter.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.alloy_blast_smelter.tooltip.1"))
            .tooltips(Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.0"),
                    Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.1"),
                    Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.2"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.alloy_blast_smelter")))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("   eeeee   ", "   cbbbc   ", "   cbbbc   ", "   cbbbc   ", "   eeeee   ", "   bbbbb   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("  ebbbbbe  ", "  c     c  ", "  c     c  ", "  c     c  ", "  efffffe  ", "  bbbbbbb  ", "   bbbbb   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   bbbbb   ", "           ")
                    .aisle(" ebbbbbbbe ", " cbeeeeebc ", " cbeeeeebc ", " cbeeeeebc ", " ebeeeeebe ", " bbbbbbbbb ", "  baaaaab  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  bbbbbbb  ", "   bbbbb   ")
                    .aisle("ebbbbbbbbbe", "c ehhhhhe c", "c eiiiiie c", "c ejjjjje c", "efeeeeeeefe", "bbbb   bbbb", " baa   aab ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " bbb   bbb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhhhhe b", "b eiiiiie b", "b ejjjjje b", "efeeeeeeefe", "bbb     bbb", " ba     ab ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " bb     bb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhkhhe b", "b eiikiie b", "b ejjkjje b", "efeeekeeefe", "bbb  k  bbb", " ba  k  ab ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " ca  k  ac ", " bb  k  bb ", "  bbbgbbb  ")
                    .aisle("ebbbbbbbbbe", "b ehhhhhe b", "b eiiiiie b", "b ejjjjje b", "efeeeeeeefe", "bbb     bbb", " ba     ab ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " ca     ac ", " bb     bb ", "  bbbbbbb  ")
                    .aisle("ebbbbbbbbbe", "c ehhhhhe c", "c eiiiiie c", "c ejjjjje c", "efeeeeeeefe", "bbbb   bbbb", " baa   aab ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " caa   aac ", " bbb   bbb ", "  bbbbbbb  ")
                    .aisle(" ebbbbbbbe ", " cbeeeeebc ", " cbeeeeebc ", " cbeeeeebc ", " ebeeeeebe ", " bbbbbbbbb ", "  baaaaab  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  caaaaac  ", "  bbbbbbb  ", "   bbbbb   ")
                    .aisle("  ebbbbbe  ", "  c     c  ", "  c     c  ", "  c     c  ", "  efffffe  ", "  bbbbbbb  ", "   bbbbb   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   ccccc   ", "   bbbbb   ", "           ")
                    .aisle("   eeeee   ", "   cbbbc   ", "   cb~bc   ", "   cbbbc   ", "   eeeee   ", "   bbbbb   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()).setMinGlobalLimited(280)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where("a", Predicates.heatingCoils())
                    .where("g", Predicates.abilities(PartAbility.MUFFLER))
                    .where("e", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("c", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("f", Predicates.blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where("h", Predicates.blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where("i", Predicates.blocks(GTBlocks.FIREBOX_TITANIUM.get()))
                    .where("j", Predicates.blocks(GTBlocks.FIREBOX_TUNGSTENSTEEL.get()))
                    .where("k", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.MAX_TEMPERATURE)
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"))
            .register();

    public final static MultiblockMachineDefinition DIMENSIONALLY_TRANSCENDENT_MIXER = REGISTRATE.multiblock("dimensionally_transcendent_mixer", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DIMENSIONALLY_TRANSCENDENT_MIXER_RECIPES)
            .recipeType(GTRecipeTypes.MIXER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.dimensionally_transcendent_mixer.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.dimensionally_transcendent_mixer"), Component.translatable("gtceu.mixer")))
            .recipeModifiers((machine, recipe, params, result) -> {
                if (machine instanceof WorkableElectricMultiblockMachine workableElectricMultiblockMachine && workableElectricMultiblockMachine.getRecipeType() == GTRecipeTypes.MIXER_RECIPES) {
                    GTRecipe recipe1 = recipe.copy();
                    recipe1.duration = recipe.duration / 10;
                    return recipe1;
                }
                return recipe;
            }, GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "                                ", "                                ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "                                ", "                                ", "                                ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "                                ", "                                ", "                                ", "FFFF     FFFF     FFFF     FFFF ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I             J             I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            AAa", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ")
                    .aisle("AABBBBBBBBBBBBBCBBBBBBBBBBBBBAAa", "A                             Aa", "                                ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " EK        K  KKK  K        KE  ", " EK  L  L  K  KJK  K  L  L  KE  ", " EK        K  KKK  K        KE  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "                                ", "A                             A ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ")
                    .aisle("AACCCCCCCCCCCCCCCCCCCCCCCCCCCAAa", "A                             A~", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I             J             I  ", " IK  L  L  K   J   K  L  L  KI  ", " IK  L  L  K   J   K  L  L  KI  ", " EK  L  L  K  KJK  K  L  L  KE  ", " NOOOOOOOOOOOOOOOOOOOOOOOOOOON  ", " EK  L  L  K  KJK  K  L  L  KE  ", " IK  L  L  K   J   K  L  L  KI  ", " IK  L  L  K   J   K  L  L  KI  ", " I             J             I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "A                             A ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ")
                    .aisle("AABBBBBBBBBBBBBCBBBBBBBBBBBBBAAa", "A                             Aa", "                                ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " EK        K  KKK  K        KE  ", " EK  L  L  K  KJK  K  L  L  KE  ", " EK        K  KKK  K        KE  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "                                ", "A                             A ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ")
                    .aisle("AA            BCB            AAa", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " I                           I  ", " I                           I  ", " I                           I  ", " IK  L  L  K   J   K  L  L  KI  ", " I                           I  ", " I                           I  ", " I                           I  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "                                ", "                                ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "  G        G       G        G   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", " I                           I  ", " I             J             I  ", " I                           I  ", " IIIIIIIIIIIIIIIIIIIIIIIIIIIII  ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  G        G       G        G   ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  IIIIIIIIIIIIIIIIIIIIIIIIIII   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "  GHHHHHHHHGHHHHHHHGHHHHHHHHG   ", "  G        G       G        G   ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AA            BCB            Aa ", "A                             A ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ", "                                ", "                                ", "                                ", "                                ", "                                ", "FFFFFFFFFFFFF     FFFF     FFFF ", "F  F     F  F     F  F     F  F ", "F  F     F  F     F  F     F  F ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "A                             A ", "AA            BCB            AA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "                                ", "                                ", "                                ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "E  E     E  E     E  E     E  E ", "                                ", "                                ", "                                ", "E  E     E  E     E  E     E  E ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "DDDD     DDDD     DDDD     DDDD ", "                                ", "                                ", "                                ", "                                ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "A                             A ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AACCCCCCCCCCCCCCCCCCCCCCCCCCCAA ", "AABBBBBBBBBBBBBCBBBBBBBBBBBBBAA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AA            BCB            AA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where("C", Predicates.blocks(GTLBlocks.NEUTRONIUM_ACTIVE_CASING.get()))
                    .where("D", Predicates.blocks(GTLBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where("E", Predicates.blocks(GTLBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where("F", Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                    .where("G", Predicates.blocks(GTLBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where("H", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.SamariumMagnetic)))
                    .where("I", Predicates.blocks(GTLBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where("J", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("K", Predicates.blocks(GTLBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where("L", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTLMaterials.HeavyQuarkDegenerateMatter)))
                    .where("N", Predicates.blocks(GTLBlocks.NEUTRONIUM_CASING.get()))
                    .where("O", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("a", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition QUANTUM_FORCE_TRANSFORMER = REGISTRATE.multiblock("quantum_force_transformer", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.QUANTUM_FORCE_TRANSFORMER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.quantum_force_transformer")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.MANIPULATOR)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("    a     a    ", "    a     a    ", "    a     a    ", "    a     a    ", "   caccaccac   ", "   caccaccac   ", "   ccccacccc   ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "  a         a  ", "  a         a  ", "  caaaaaaaaac  ", "   aaacccaaa   ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", " a           a ", " a           a ", " caa       aac ", "  aa       aa  ", "    aa   aa    ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "c             c", "c             c", "caa         aac", " aa         aa ", "   aa     aa   ", "     cdddc     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("a     bbb     a", "a     eee     a", "a     eee     a", "a     eee     a", "a     ddd     a", "a     eee     a", "ca    ddd    ac", " a    eee    a ", "  aa  eee  aa  ", "    cdeeedc    ", "      ddd      ", "      eee      ", "      eee      ", "      eee      ", "      ddd      ", "      eee      ", "      ddd      ", "      eee      ", "      eee      ", "      eee      ", "      ddd      ")
                    .aisle("     bbbbb     ", "     efffe     ", "     efffe     ", "     efffe     ", "c    dcccd    c", "c    efffe    c", "ca   dcccd   ac", " a   efffe   a ", "  a  efffe  a  ", "   cdefffedc   ", "     dcccd     ", "     efffe     ", "     efffe     ", "     efffe     ", "     dcccd     ", "     efffe     ", "     dcccd     ", "     efffe     ", "     efffe     ", "     efffe     ", "     ddddd     ")
                    .aisle("    bbbbbbb    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "c   dc   cd   c", "c   ef   fe   c", "ca  dc   cd  ac", "cc  ef   fe  cc", " c  ef   fe  c ", "  cdef   fedc  ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    efffffe    ", "    ddddddd    ")
                    .aisle("    bbbbbbb    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "a   dc   cd   a", "a   ef   fe   a", "aa  dc   cd  aa", "ac  ef   fe  ca", " a  ef   fe  a ", "  adef   feda  ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    efffffe    ", "    ddddddd    ")
                    .aisle("    bbbbbbb    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "c   dc   cd   c", "c   ef   fe   c", "ca  dc   cd  ac", "cc  ef   fe  cc", " c  ef   fe  c ", "  cdef   fedc  ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    dc   cd    ", "    ef   fe    ", "    ef   fe    ", "    efffffe    ", "    ddddddd    ")
                    .aisle("     bbbbb     ", "     efffe     ", "     efffe     ", "     efffe     ", "c    dcccd    c", "c    efffe    c", "ca   dcccd   ac", " a   efffe   a ", "  a  efffe  a  ", "   cdefffedc   ", "     dcccd     ", "     efffe     ", "     efffe     ", "     efffe     ", "     dcccd     ", "     efffe     ", "     dcccd     ", "     efffe     ", "     efffe     ", "     efffe     ", "     ddddd     ")
                    .aisle("a     b~b     a", "a     eee     a", "a     eee     a", "a     eee     a", "a     ddd     a", "a     eee     a", "ca    ddd    ac", " a    eee    a ", "  aa  eee  aa  ", "    cdeeedc    ", "      ddd      ", "      eee      ", "      eee      ", "      eee      ", "      ddd      ", "      eee      ", "      ddd      ", "      eee      ", "      eee      ", "      eee      ", "      ddd      ")
                    .aisle("               ", "               ", "               ", "               ", "c             c", "c             c", "caa         aac", " aa         aa ", "   aa     aa   ", "     cdddc     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", " a           a ", " a           a ", " caa       aac ", "  aa       aa  ", "    aa   aa    ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "  a         a  ", "  a         a  ", "  caaaaaaaaac  ", "   aaacccaaa   ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    a     a    ", "    a     a    ", "    a     a    ", "    a     a    ", "   caccaccac   ", "   caccaccac   ", "   ccccacccc   ", "      cac      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.MANIPULATOR.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where("a", Predicates.blocks(GTLBlocks.SPACETIMECONTINUUMRIPPER.get()))
                    .where("c", Predicates.blocks(GTLBlocks.SPACETIMEBENDINGCORE.get()))
                    .where("d", Predicates.blocks(GTLBlocks.MANIPULATOR.get()))
                    .where("e", Predicates.blocks(GTLBlocks.FORCE_FIELD_GLASS.get()))
                    .where("f", Predicates.blocks(GTLBlocks.quantum_force_transformer_coil.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/manipulator"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition LARGE_CHEMICAL_PLANT = REGISTRATE.multiblock("large_chemical_plant", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.LARGE_CHEMICAL_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtlcore.machine.chemical_plant.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.large_chemical_reactor")))
            .recipeModifier(GTLRecipeModifiers::chemicalPlantOverclock)
            .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaaaaaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bd b db  ", "  cd b dc  ", "  cd b dc  ", "  cd b dc  ", "  bd b db  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaa~aaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("a", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("d", Predicates.heatingCoils())
                    .where("b", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public final static MultiblockMachineDefinition INTEGRATED_ORE_PROCESSOR = REGISTRATE.multiblock("integrated_ore_processor", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.1"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.2"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.3"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.4"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.5"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.6"))
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.7"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.integrated_ore_processor")))
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d accca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       gcc ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       ccc ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d ac~ca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("a", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("c", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(60)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("b", Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where("d", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where("e", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("f", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("g", Predicates.blocks(GTMachines.MUFFLER_HATCH[GTValues.ZPM].get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public final static MultiblockMachineDefinition DRAGON_EGG_COPIER = REGISTRATE.multiblock("dragon_egg_copier", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DRAGON_EGG_COPIER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.dragon_egg_copier")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.DRAGON_STRENGTH_TRITANIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("bbb", "bbb", "bbb")
                    .aisle("bbb", "bcb", "bdb")
                    .aisle("bbb", "bab", "bbb")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTLBlocks.DRAGON_STRENGTH_TRITANIUM_CASING.get())
                            .setMinGlobalLimited(10)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTLBlocks.MAGIC_CORE.get()))
                    .where("d", Predicates.blocks(GTMachines.MUFFLER_HATCH[GTValues.UEV].get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/extreme_strength_tritanium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition LARGE_CRACKER = REGISTRATE.multiblock("large_cracker", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CRACKING_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.cracker")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers::crackerOverclock)
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("a", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(200)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("b", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("c", Predicates.heatingCoils())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed() && controller instanceof CoilWorkableElectricMultiblockMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.cracking_unit.energy", 100 - 10 * machine.getCoilTier()));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/cracking_unit"))
            .register();

    public final static MultiblockMachineDefinition LARGE_GREENHOUSE = REGISTRATE.multiblock("large_greenhouse", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.GREENHOUSE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.large_greenhouse.tooltip.0"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.greenhouse")))
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", "aaaaaaaaa", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "aaaaaaaaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "c       c", "c       c", "c       c", "c       c", "c       c", "c       c", "accccccca", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "addddddda", "b       b", "b       b", "b       b", "b       b", "b       b", "b       b", "aeeeceeea", "afffffffa")
                    .aisle("aaaaaaaaa", "aaaa~aaaa", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "abbbcbbba", "aaaaaaaaa", "aaaaaaaaa")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("c", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where("d", Predicates.blocks(Blocks.PACKED_MUD))
                    .where("e", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("f", Predicates.blocks(GTBlocks.CASING_GRATE.get()))
                    .where("a", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(180)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public final static MultiblockMachineDefinition STEAM_PISTON_HAMMER = REGISTRATE.multiblock("steam_piston_hammer", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.forge_hammer")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .addOutputLimit(ItemRecipeCapability.CAP, 1)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .aisle("ABA", "E#E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " S ", "   ", "   ", "   ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron)))
                    .where("C", Predicates.blocks(Blocks.STICKY_PISTON))
                    .where("D", Predicates.abilities(PartAbility.STEAM))
                    .where("E", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where("#", Predicates.air())
                    .where(" ", Predicates.any())
                    .build())
            .shapeInfo(definition -> MultiblockShapeInfo.builder()
                    .aisle("IAO", " S ", "   ", "   ", "   ")
                    .aisle("ABA", "E E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .where('S', definition, Direction.NORTH)
                    .where('A', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('E', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('I', GTMachines.STEAM_IMPORT_BUS, Direction.NORTH)
                    .where('O', GTMachines.STEAM_EXPORT_BUS, Direction.NORTH)
                    .where('D', GTMachines.STEAM_HATCH, Direction.NORTH)
                    .where('B', ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron))
                    .where('C', Blocks.STICKY_PISTON.defaultBlockState().setValue(DirectionalBlock.FACING, Direction.DOWN))
                    .where(' ', Blocks.AIR)
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/forge_hammer"))
            .register();

    public final static MultiblockMachineDefinition STEAM_PRESSOR = REGISTRATE.multiblock("steam_pressor", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.COMPRESSOR_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.compressor")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .addOutputLimit(ItemRecipeCapability.CAP, 1)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXX", "XXX", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "XSX", "XXX")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("X", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1)))
                    .where("#", Predicates.air())
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_pressor"))
            .register();

    public final static MultiblockMachineDefinition STEAM_FOUNDRY = REGISTRATE.multiblock("steam_foundry", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.alloy_smelter")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .addOutputLimit(ItemRecipeCapability.CAP, 1)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("FFF", "XXX", "XXX")
                    .aisle("FFF", "X#X", "XXX")
                    .aisle("FFF", "XSX", "XXX")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("F", Predicates.blocks(GTBlocks.FIREBOX_BRONZE.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1)))
                    .where("X", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("#", Predicates.air())
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/alloy_smelter"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_MACERATOR = REGISTRATE.multiblock("large_steam_macerator", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.MACERATOR_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.macerator")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .addOutputLimit(ItemRecipeCapability.CAP, 1)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A       A", "A BBBBB A", "A       A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   C   A", "A B C B A", "A   C   A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A D C D A", "ADDD DDDA", "A D C D A", "AAAAEAAAA")
                    .aisle("AAAAAAAAA", "A   C   A", "A B C B A", "A   C   A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A       A", "A BBBBB A", "A       A", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("C", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("D", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Steel)))
                    .where("E", Predicates.abilities(PartAbility.MUFFLER))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_CIRCUIT_ASSEMBLER = REGISTRATE.multiblock("large_steam_circuit_assembler", largeSteamCircuitAssemblerMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.circuit_assembler")))
            .recipeModifier(largeSteamCircuitAssemblerMachine::recipeModifier)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", "AAA", "DDD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ASA", "DDD", " D ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("C", Predicates.blocks(GTLBlocks.STEAM_ASSEMBLY_BLOCK.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_circuit_assembler"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_MIXER = REGISTRATE.multiblock("large_steam_mixer", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.MIXER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.mixer")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A   D   A", "A CCCCC A", "A   D   A", "A CCCCC A", "A   D   A", "ABBBBBBBA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle(" AAAAAAA ", " AAASAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where("C", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(4))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_mixer"))
            .register();

    public final static MultiblockMachineDefinition STEAM_MIXER = REGISTRATE.multiblock("steam_mixer", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.MIXER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.mixer")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAA ", " AAA ", " AAA ")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle("AAAAA", "ACDCA", "AEEEA")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle(" AAA ", " ASA ", " AAA ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where("B", Predicates.air())
                    .where("C", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.blocks(Blocks.GLASS))
                            .or(Predicates.air()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_mixer"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_CENTRIFUGE = REGISTRATE.multiblock("large_steam_centrifuge", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.centrifuge")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("           ", "   AAAAA   ", "  AAAAAAA  ", "   AAAAA   ", "           ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A   ECE   A", "A CCCCCCC A", "A    C    A", " AAAAFAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle("           ", "   AAAAA   ", "  AAASAAA  ", "   AAAAA   ", "           ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where("C", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("F", Predicates.abilities(PartAbility.MUFFLER))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_centrifuge"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_THERMAL_CENTRIFUGE = REGISTRATE.multiblock("large_steam_thermal_centrifuge", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.THERMAL_CENTRIFUGE_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.thermal_centrifuge")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAA ", " BBBBB ", " BBBBB ", " BBBBB ", "       ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("AAAAAAA", "B  D  B", "B  D  B", "B  D  B", " BBEBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle(" AAAAA ", " BBBBB ", " BBSBB ", " BBBBB ", "       ")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("A", Predicates.blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where("E", Predicates.abilities(PartAbility.MUFFLER))
                    .where("B", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_thermal_centrifuge"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_BATH = REGISTRATE.multiblock("large_steam_bath", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.chemical_bath")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where("C", Predicates.blocks(Blocks.GLASS))
                    .where("D", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public final static MultiblockMachineDefinition STEAM_BATH = REGISTRATE.multiblock("steam_bath", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.chemical_bath")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where("B", Predicates.air())
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.blocks(Blocks.GLASS))
                            .or(Predicates.air()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public final static MultiblockMachineDefinition LARGE_STEAM_ORE_WASHER = REGISTRATE.multiblock("large_steam_ore_washer", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 64))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.ORE_WASHER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.ore_washer")))
            .recipeModifier(GTLRecipeModifiers.LARGE_STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "ABBBDBBBA", "A  BBB  A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("B", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where("C", Predicates.blocks(Blocks.GLASS))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_ore_washer"))
            .register();

    public final static MultiblockMachineDefinition steam_ore_washer = REGISTRATE.multiblock("steam_ore_washer", (holder) -> new LargeSteamParallelMultiblockMachine(holder, 8))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.ORE_WASHER_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.ore_washer")))
            .recipeModifier(GTLRecipeModifiers.STEAM_OC)
            .appearanceBlock(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "ACDCA", "AEDEA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where("S", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where("D", Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_ore_washer"))
            .register();

    public final static MultiblockMachineDefinition DIMENSIONALLY_TRANSCENDENT_DIRT_FORGE = REGISTRATE.multiblock("dimensionally_transcendent_dirt_forge", NoEnergyMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.PRIMITIVE_BLAST_FURNACE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.dimensionally_transcendent_dirt_forge.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.primitive_blast_furnace")))
            .recipeModifier((machine, recipe, params, result) -> {
                GTRecipe recipe1 = recipe.copy();
                recipe1.duration = 0;
                recipe1 = GTRecipeModifiers.fastParallel(machine, recipe1, 524288, false).getFirst();
                return recipe1;
            })
            .appearanceBlock(GTBlocks.CASING_PRIMITIVE_BRICKS)
            .pattern(definition -> GTLMachines.DTPF.where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("e", Predicates.blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where("b", Predicates.blocks(Blocks.BRICKS))
                    .where("C", Predicates.blocks(Blocks.DIRT))
                    .where("d", Predicates.blocks(Blocks.STONE_BRICKS))
                    .where("s", Predicates.blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed()) {
                    components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal("524288").withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_primitive_bricks"), GTCEu.id("block/multiblock/primitive_blast_furnace"))
            .register();

    public final static MultiblockMachineDefinition PETROCHEMICAL_PLANT = REGISTRATE.multiblock("petrochemical_plant", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.PETROCHEMICAL_PLANT_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.petrochemical_plant")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers::crackerOverclock)
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAAA", "BBBBBBBBBB", "BCCCBBBHBB", "BBBBBBBBBB", "BBBBBBBBBB", "          ", "          ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BKKKB DDDC", "CDDDC DGDC", "BKKKB DDDC", "BBBBBBBBBB", " BBBBBBBB ", "          ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BKKKB    B", "CDMDC  G B", "BKIKB  G B", "BBIBBBBGBB", " BIIIIIIB ", "  BBBBBB  ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BKKKB DDDC", "CDIDC DGDC", "BKKKB DDDC", "BBBBBBBBBB", " BBBBBBBB ", "  BBBBBB  ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BKKKB    B", "CDMDC  G B", "BKIKB  G B", "BBIBBBBGBB", " BIIIIIIB ", "  BBBBBB  ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BKKKB DDDC", "CDIDC DGDC", "BKKKB DDDC", "BBIBBBBBBB", " BBBBBBBB ", "  BBBBBB  ", "          ", "          ", "          ", "          ", "          ", "          ", "          ")
                    .aisle("ABBBBBBBBA", "BBBBBBBBBB", "BBIBBBBGBB", "BBBBBBBBBB", "BBIBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBB     ", "BBBBB     ", "BBBBB     ", "BBBBB     ")
                    .aisle("ABBBBBBBBA", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BBBBBB", "B   B     ", "B   B     ", "B   B     ", "BBBBB     ")
                    .aisle("ABBBBBBBBA", "B F BB F B", "B F GG F B", "B F BB F B", "B F BB F B", "B F BB F B", "B F BB F B", "B F BB F B", "B F BB F B", "B F BBBHBB", "B F B     ", "B F B     ", "B F B     ", "BBHBB     ")
                    .aisle("ABBBBBBBBA", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BB   B", "B   BBBBBB", "B   B     ", "B   B     ", "B   B     ", "BBBBB     ")
                    .aisle("AAAAAAAAAA", "BBBBBBBEBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBBBBBBB", "BBBBB     ", "BBBBB     ", "BBBBB     ", "BBBBB     ")
                    .where("E", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where("C", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("D", Predicates.heatingCoils())
                    .where("F", Predicates.blocks(GTBlocks.HERMETIC_CASING_HV.get()))
                    .where("G", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("H", Predicates.abilities(PartAbility.MUFFLER))
                    .where("I", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("K", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where("M", Predicates.blocks(GTBlocks.HERMETIC_CASING_EV.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed() && controller instanceof CoilWorkableElectricMultiblockMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.cracking_unit.energy", 100 - 10 * machine.getCoilTier()));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public final static MultiblockMachineDefinition COKING_TOWER = REGISTRATE.multiblock("coking_tower", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.PYROLYSE_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.pyrolyse_oven")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers::pyrolyseOvenOverclock)
            .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("ABBBA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", " ACA ")
                    .aisle("BDDDB", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "ACCCA")
                    .aisle("BDDDB", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CFGFC", "CEGEC", "CCHCC")
                    .aisle("BDDDB", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "CFFFC", "CEEEC", "ACCCA")
                    .aisle("ABBBA", "ACCCA", "AC~CA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", "ACCCA", " ACA ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.frames(GTMaterials.StainlessSteel))
                    .where("B", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("C", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(130)
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("D", Predicates.blocks(GTBlocks.FIREBOX_TITANIUM.get()))
                    .where("E", Predicates.heatingCoils())
                    .where("F", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("G", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("H", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller.isFormed() && controller instanceof CoilWorkableElectricMultiblockMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.pyrolyse_oven.speed", machine.getCoilTier() == 0 ? 75 : 50 * (machine.getCoilTier() + 15)));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/pyrolyse_oven"))
            .register();

    public final static MultiblockMachineDefinition LARGE_ROCK_CRUSHER = REGISTRATE.multiblock("large_rock_crusher", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.ROCK_BREAKER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtlcore.machine.large_rock_crusher.tooltip.0"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.rock_breaker")))
            .recipeModifiers(GTLRecipeModifiers.GCYM_REDUCTION, GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GCyMBlocks.CASING_SECURE_MACERATION)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABBBA", "A   A", "A C A")
                    .aisle("AAAAA", "AB BA", "A   A", "ACCCA")
                    .aisle("AAAAA", "ABBBA", "A   A", "A C A")
                    .aisle("AAAAA", "AA~AA", "AAAAA", "AAAAA")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GCyMBlocks.CASING_SECURE_MACERATION.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS_1X).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GCyMBlocks.CRUSHING_WHEELS.get()))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.MaragingSteel300)))
                    .where(" ", Predicates.air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/secure_maceration_casing"), GTCEu.id("block/machines/rock_crusher"))
            .register();

    public final static MultiblockMachineDefinition CHEMICAL_DISTORT = REGISTRATE.multiblock("chemical_distort", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DISTORT_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.chemical_distort.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.chemical_distort.tooltip.1"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.distort")))
            .recipeModifiers((machine, recipe, params, result) -> GTRecipeModifiers.accurateParallel(machine, recipe, Math.max(1, (((CoilWorkableElectricMultiblockMachine) machine).getCoilType().getCoilTemperature() - recipe.data.getInt("ebf_temp")) / 100 * 4), false).getFirst(), GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "   AAAAA   ")
                    .aisle("  ABBBBBA  ", "     B     ", "    B      ", "           ", "           ", "      B    ", "     B     ", "    B      ", "           ", "           ", "      B    ", "     B     ", "    B      ", "           ", "           ", "      B    ", "     B     ", "    B      ", "           ", "           ", "      B    ", "     B     ", "    B      ", "           ", "           ", "      B    ", "     B     ", "  ABBBBBA  ")
                    .aisle(" ABBBBBBBA ", "     C     ", "           ", "   B       ", "       B   ", "           ", "           ", "           ", "   B       ", "       B   ", "           ", "           ", "           ", "   B       ", "       B   ", "           ", "           ", "           ", "   B       ", "       B   ", "           ", "           ", "           ", "   B       ", "       B   ", "           ", "     C     ", " ABBBBBBBA ")
                    .aisle("ABBBBBBBBBA", "     C     ", "           ", "        B  ", "  B        ", "           ", "           ", "           ", "        B  ", "  B        ", "           ", "           ", "           ", "        B  ", "  B        ", "           ", "           ", "           ", "        B  ", "  B        ", "           ", "           ", "           ", "        B  ", "  B        ", "           ", "     C     ", "ABBBBBBBBBA")
                    .aisle("ABBBBBBBBBA", "     C     ", "     C   B ", "     C     ", "     C     ", " B   C     ", "     C     ", "     C   B ", "     C     ", "     C     ", " B   C     ", "     C     ", "     C   B ", "     C     ", "     C     ", " B   C     ", "     C     ", "     C   B ", "     C     ", "     C     ", " B   C     ", "     C     ", "     C   B ", "     C     ", "     C     ", " B   C     ", "     C     ", "ABBBBBBBBBA")
                    .aisle("ABBBBDBBBBA", " BCCCECCCB ", "    CEC    ", "    CEC    ", "    CEC    ", "    CEC    ", " B  CEC  B ", "    CEC    ", "    CEC    ", "    CEC    ", "    CEC    ", " B  CEC  B ", "    CEC    ", "    CEC    ", "    CEC    ", "    CEC    ", " B  CEC  B ", "    CEC    ", "    CEC    ", "    CEC    ", "    CEC    ", " B  CEC  B ", "    CEC    ", "    CEC    ", "    CEC    ", "    CEC    ", " BCCCECCCB ", "ABBBBDBBBBA")
                    .aisle("ABBBBBBBBBA", "     C     ", " B   C     ", "     C     ", "     C     ", "     C   B ", "     C     ", " B   C     ", "     C     ", "     C     ", "     C   B ", "     C     ", " B   C     ", "     C     ", "     C     ", "     C   B ", "     C     ", " B   C     ", "     C     ", "     C     ", "     C   B ", "     C     ", " B   C     ", "     C     ", "     C     ", "     C   B ", "     C     ", "ABBBBBBBBBA")
                    .aisle("ABBBBBBBBBA", "     C     ", "           ", "  B        ", "        B  ", "           ", "           ", "           ", "  B        ", "        B  ", "           ", "           ", "           ", "  B        ", "        B  ", "           ", "           ", "           ", "  B        ", "        B  ", "           ", "           ", "           ", "  B        ", "        B  ", "           ", "     C     ", "ABBBBBBBBBA")
                    .aisle(" ABBBBBBBA ", "     C     ", "           ", "       B   ", "   B       ", "           ", "           ", "           ", "       B   ", "   B       ", "           ", "           ", "           ", "       B   ", "   B       ", "           ", "           ", "           ", "       B   ", "   B       ", "           ", "           ", "           ", "       B   ", "   B       ", "           ", "     C     ", " ABBBBBBBA ")
                    .aisle("  ABBBBBA  ", "     B     ", "      B    ", "           ", "           ", "    B      ", "     B     ", "      B    ", "           ", "           ", "    B      ", "     B     ", "      B    ", "           ", "           ", "    B      ", "     B     ", "      B    ", "           ", "           ", "    B      ", "     B     ", "      B    ", "           ", "           ", "    B      ", "     B     ", "  ABBBBBA  ")
                    .aisle("   AA~AA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "   AAAAA   ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where("C", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setPreviewCount(2)))
                    .where("E", Predicates.heatingCoils())
                    .where(" ", Predicates.any())
                    .build())
            .beforeWorking((machine, recipe) -> recipe.data.getInt("ebf_temp") <= ((CoilWorkableElectricMultiblockMachine) machine).getCoilType().getCoilTemperature())
            .additionalDisplay(GTLMachines.TEMPERATURE)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition MEGA_WIREMILL = REGISTRATE.multiblock("mega_wiremill", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.WIREMILL_RECIPES)
            .recipeType(GTLRecipeTypes.LOOM_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.wiremill"), Component.translatable("gtceu.loom")))
            .appearanceBlock(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("  AAA  ", "  AAA  ", "       ", "  BBB  ", "  BBB  ", "  BBB  ", "       ")
                    .aisle("  AAA  ", "  AAA  ", "  AAA  ", "  BBB  ", "  BBB  ", "  BBB  ", "       ")
                    .aisle("  AAA  ", "       ", "  CCC  ", " CDDDC ", " CDEDC ", " CDDDC ", "  CCC  ")
                    .aisle("  AAA  ", "       ", "  CCC  ", " CDDDC ", " CDEDC ", " CDDDC ", "  CCC  ")
                    .aisle("AAAAAAA", "       ", "  CCC  ", " CDDDC ", " CDEDC ", " CDDDC ", "  CCC  ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("AAAAAAA", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("AAAAAAA", " F   F ", " FGGGF ", " GHHHG ", " GHEHG ", " GHHHG ", "  GGG  ")
                    .aisle("aaAAAaa", "       ", "       ", "  HHH  ", "  HEH  ", "  HHH  ", "       ")
                    .aisle("  aAa  ", "  aAa  ", "  aAa  ", "  III  ", "  III  ", "  III  ", "       ")
                    .aisle("  aaa  ", "  a~a  ", "  aaa  ", "       ", "       ", "       ", "       ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where("a", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("D", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("E", Predicates.blocks(GTLBlocks.HOLLOW_CASING.get()))
                    .where("F", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where("G", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("H", Predicates.heatingCoils())
                    .where("I", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTLCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_wiremill"))
            .register();

    public final static MultiblockMachineDefinition MEGA_PRESSER = REGISTRATE.multiblock("mega_presser", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.COMPRESSOR_RECIPES)
            .recipeType(GTRecipeTypes.FORMING_PRESS_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.compressor"), Component.translatable("gtceu.forming_press")))
            .appearanceBlock(GTLBlocks.MOLECULAR_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("     AAAAA     ", "   AABBCBBAA   ", "  ABBBBCBBBBA  ", " ABBBBBCBBBBBA ", " ABBBBBCBBBBBA ", "ABBBBBCCCBBBBBA", "ABBBBCCCCCBBBBA", "ACCCCCCCCCCCCCA", "ABBBBCCCCCBBBBA", "ABBBBBCCCBBBBBA", " ABBBBBCBBBBBA ", " ABBBBBCBBBBBA ", "  ABBBBCBBBBA  ", "   AABBCBBAA   ", "     AAAAA     ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("     AAAAA     ", "   AABBBBBAA   ", "  ABB     BBA  ", " AB         BA ", " AB         BA ", "AB           BA", "AB     E     BA", "AB    EEE    BA", "AB     E     BA", "AB           BA", " AB         BA ", " AB         BA ", "  ABB     BBA  ", "   AABBBBBAA   ", "     AAAAA     ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("     AAAAA     ", "   AAFFFFFAA   ", "  AFF     FFA  ", " AF         FA ", " AF   GGG   FA ", "AF   G   G   FA", "AF  G  E  G  FA", "AF  G EEE G  FA", "AF  G  E  G  FA", "AF   G   G   FA", " AF   GGG   FA ", " AF         FA ", "  AFF     FFA  ", "   AAFFFFFAA   ", "     AAAAA     ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F   GGG   F  ", " F   G   G   F ", " F  G BBB G  F ", "AF  G BBB G  FA", " F  G BBB G  F ", " F   G   G   F ", "  F   GGG   F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F           F ", "AF           FA", " F           F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F           F ", "AF           FA", " F           F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F           F ", "AF           FA", " F           F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F   GGG   F  ", " F   G   G   F ", " F  G BBB G  F ", "AF  G BBB G  FA", " F  G BBB G  F ", " F   G   G   F ", "  F   GGG   F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("     AAAAA     ", "   AAFFFFFAA   ", "  AFF     FFA  ", " AF         FA ", " AF   GGG   FA ", "AF   G   G   FA", "AF  G  E  G  FA", "AF  G EEE G  FA", "AF  G  E  G  FA", "AF   G   G   FA", " AF   GGG   FA ", " AF         FA ", "  AFF     FFA  ", "   AAFFFFFAA   ", "     AAAAA     ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("       A       ", "     FFFFF     ", "   FF     FF   ", "  F         F  ", "  F         F  ", " F           F ", " F     E     F ", "AF    EEE    FA", " F     E     F ", " F           F ", "  F         F  ", "  F         F  ", "   FF     FF   ", "     FFFFF     ", "       A       ")
                    .aisle("     AAAAA     ", "   AABBBBBAA   ", "  ABB     BBA  ", " AB         BA ", " AB         BA ", "AB           BA", "AB     E     BA", "AB    EEE    BA", "AB     E     BA", "AB           BA", " AB         BA ", " AB         BA ", "  ABB     BBA  ", "   AABBBBBAA   ", "     AAAAA     ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("       A       ", "     BBBBB     ", "   BBDDDDDBB   ", "  BDDDDDDDDDB  ", "  BDDD   DDDB  ", " BDDD     DDDB ", " BDD   E   DDB ", "ABDD  EEE  DDBA", " BDD   E   DDB ", " BDDD     DDDB ", "  BDDD   DDDB  ", "  BDDDDDDDDDB  ", "   BBDDDDDBB   ", "     BBBBB     ", "       A       ")
                    .aisle("     AAAAA     ", "   AABBCBBAA   ", "  ABBBBCBBBBA  ", " ABBBBBCBBBBBA ", " ABBBBBCBBBBBA ", "ABBBBBCCCBBBBBA", "ABBBBCCCCCBBBBA", "ACCCCCC~CCCCCCA", "ABBBBCCCCCBBBBA", "ABBBBBCCCBBBBBA", " ABBBBBCBBBBBA ", " ABBBBBCBBBBBA ", "  ABBBBCBBBBA  ", "   AABBCBBAA   ", "     AAAAA     ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("C", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("D", Predicates.blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("G", Predicates.heatingCoils())
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTLCore.id("block/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition FIELD_FORGE_PRESS = REGISTRATE.multiblock("field_forge_press", WorkableElectricParallelHatchMultipleRecipesMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.forge_hammer")))
            .appearanceBlock(GTLBlocks.MOLECULAR_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("a  a         a  a
                    .aisle("aaaa   aaa   aaaa", "AAAA   a~a   AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A   AAA   A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AA A L A AA  A", "AEEAA A L A AAEEA", "AFFAA A L A AAFFA", "BFFBAAAALAAAABFFB", " FF   L L L   FF ", " FF   L L L   FF ", " FF   L L L   FF ", "BFFB  L L L  BFFB", "A  AAALALALAAA  A", "A  A  L L LLLA  A", "A  A  LLL   LA  A", "A  A  L     LA  A", "BBBB  L     LBBBB", "      L     L    ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "AEEAAAAAAAAAAAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAALALALAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAA  DDDDD   AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  AL L LA  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("ADDA  DDDDD   DDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA           AA ", " AA           AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    HHLHH  HLH   ", "    HHHHH   H    ", "     HHH         ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBBEBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    H   H  HLH   ", "    H   H   H    ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    HEEEH  H H   ", "    HEEEH  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", "   J IIFFFII J   ", " AAJ IIFFFII JAA ", "CAAJ IIFFFII JAAC", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "CAAAA BFFFB AAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBB BBB AAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           H H   ", "            H    ", "                 ")
                    .aisle("ADDA  DDDDD  ADDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA  A A A A  AA ", " AA A A A A A AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           HEH   ", "            H    ", "                 ")
                    .aisle("AAAA  DDDDD  AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AA ", "CAA           AA ", "CAAAAAAAAAAAAAAAC", "CAA  A A A A  AAC", "CAA A A A A A AAC", "CAAAAAAAAAAAAAAAC", "BBBBAAAAAAAAABBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  A     A  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFB         BFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAA          AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AAC         CAA ", " AAC         CAA ", " AACCCCCCCCCCCAA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("C", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTLMaterials.Inconel792)))
                    .where("D", Predicates.blocks(GCyMBlocks.CASING_STRESS_PROOF.get()))
                    .where("E", Predicates.blocks(GTBlocks.MACHINE_CASING_UEV.get()))
                    .where("F", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("G", Predicates.blocks(GTLBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where("H", Predicates.blocks(GTLBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where("I", Predicates.blocks(GTLBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where("J", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("K", Predicates.blocks(GTLBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where("L", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where("a", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTLCore.id("block/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition HEAVY_ROLLING = REGISTRATE.multiblock("heavy_rolling", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.BENDER_RECIPES)
            .recipeType(GTLRecipeTypes.CLUSTER_RECIPES)
            .recipeType(GTLRecipeTypes.ROLLING_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_3.tooltip",
                    Component.translatable("gtceu.bender"), Component.translatable("gtceu.rolling"), Component.translatable("gtceu.cluster")))
            .appearanceBlock(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("CCCCCCCCCCCCC", "CCCCCCCCCCCCC", " C         C ", " CCCCCCCCCCC ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("CPCCCCCCCCCPC", "CPDDDEEEDDDPC", " P         P ", " PPPPPPPPPPP ", "     HHH     ", "             ", "             ", "             ", "             ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "     HHH     ", "     B B     ", "     B B     ", "     BBB     ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KOOK KOOK  ", "  KOOK KOOK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P   Q  Q  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  O  K K  O  ", "  O  K K  O  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPQQPQQPPP ", "  KKQQHQQKK  ", "  ODDK KDDO  ", "  ODDK KDDO  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P  QQ QQ  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KKKK KKKK  ", "  KKKK KKKK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "     BHB     ", "     B B     ", "     B B     ", "     B B     ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "      H      ", "             ", "             ", "     B B     ")
                    .aisle("CHHHHHHHHHHHC", "CHCCCCCCCCCHC", " H         H ", " H         H ", " HHHHHHHHHHH ", " HHHHHHHHHHH ", "             ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHOOOOOOOOOHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "   HHHHHH    ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBBBBBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H JJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", "EH         HE", "EH         HE", "EEEEEEEEEEEEE", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ")
                    .aisle("HHHHHHHHHHHHH", "HHHHHHHHHHHHH", " HCCCCCCCCCH ", " H         H ", " HCCCCCCCCCH ", " HHHHHHHHHHH ", " HIIIIHIIIIH ", " HHHHHHHHHHH ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " BCCC   CCCB ", " B         B ", "  AAAAAAAAA  ", "  HHHHHHHHH  ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " B         B ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", " A         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aAGGGGGGGGGAA", "BAG       GAB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", "aA         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", "~A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", "aB         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCC     CCBA", " B         B ", " B         B ", "             ", "             ", "             ", "             ", "             ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where("C", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("D", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("E", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("G", Predicates.heatingCoils())
                    .where("H", Predicates.blocks(GTLBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where("I", Predicates.blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where("J", Predicates.blocks(GCyMBlocks.CASING_STRESS_PROOF.get()))
                    .where("K", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("L", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("M", Predicates.blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where("N", Predicates.blocks(GTLBlocks.NEUTRONIUM_CASING.get()))
                    .where("O", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("P", Predicates.blocks(GTLBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where("Q", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("a", Predicates.blocks(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition MEGA_EXTRACTOR = REGISTRATE.multiblock("mega_extractor", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.EXTRACTOR_RECIPES)
            .recipeType(GTRecipeTypes.FLUID_SOLIDFICATION_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.extractor"), Component.translatable("gtceu.fluid_solidifier")))
            .appearanceBlock(GTLBlocks.HYPER_MECHANICAL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("      AAA      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    AAAAAAA    ", "      AAA      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "    AAAAAAA    ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ")
                    .aisle("  AAAAAAAAAAA  ", "   AAAAAAAAA   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ")
                    .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "       C       ", "      CCC      ", "       C       ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "     AAAAA     ")
                    .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "       D       ", "       D       ", "       D       ", "       D       ", "               ", "               ", "      CCC      ", "     CC CC     ", "     C   C     ", "     CC CC     ", "      CCC      ", "               ", "               ", "       D       ", "       D       ", "       D       ", "       D       ", "    AAAAAAA    ")
                    .aisle("AAAAAAAAAAAAAAA", " AAAAAAAAAAAAA ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B     E     B ", " B     C     B ", " B   CC CC   B ", " B   C   C   B ", " B  C     C  B ", " B   C   C   B ", " B   CC CC   B ", " B     C     B ", " B     E     B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " AAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAA", " AAAAAAAAAAAAA ", "     DEFED     ", "     DEFED     ", "     DEFED     ", "     DEFED     ", "      EFE      ", "      CFC      ", "     C   C     ", "    C     C    ", "    C     C    ", "    C     C    ", "     C   C     ", "      CFC      ", "      EFE      ", "     DEFED     ", "     DEFED     ", "     DEFED     ", "     DEFED     ", " AAAAAAAAAAAAA ")
                    .aisle("AAAAAAAAAAAAAAA", " AAAAAAAAAAAAA ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B     E     B ", " B     C     B ", " B   CC CC   B ", " B   C   C   B ", " B  C     C  B ", " B   C   C   B ", " B   CC CC   B ", " B     C     B ", " B     E     B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " B    DED    B ", " AAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "       D       ", "       D       ", "       D       ", "       D       ", "               ", "               ", "      CCC      ", "     CC CC     ", "     C   C     ", "     CC CC     ", "      CCC      ", "               ", "               ", "       D       ", "       D       ", "       D       ", "       D       ", "    AAAAAAA    ")
                    .aisle(" AAAAAAAAAAAAA ", "  AAAAAAAAAAA  ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "       C       ", "      CCC      ", "       C       ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "     AAAAA     ")
                    .aisle("  AAAAAAAAAAA  ", "   AAAAAAAAA   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "    AAAAAAA    ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "      AAA      ")
                    .aisle("    AAAAAAA    ", "      AAA      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      B B      ", "      AAA      ")
                    .aisle("      AAA      ", "      A~A      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where("C", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("D", Predicates.heatingCoils())
                    .where("E", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTLCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_extractor"))
            .register();

    public final static MultiblockMachineDefinition MEGA_CANNER = REGISTRATE.multiblock("mega_canner", WorkableElectricParallelHatchMultipleRecipesMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.CANNER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.canner")))
            .appearanceBlock(GTLBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   D D   ", "    B    ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BBB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BCB   ", "  BDCDB  ", "  BDCDB  ", "   EEE   ", "   F F   ", "   F F   ", "   EEE   ", "  BDCDB  ", "  BDCDB  ", "  BBCBB  ", "   BBB   ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   DDD   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "    B    ", "         ", "         ", "         ", "         ", "         ", "         ", "    B    ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BBB   ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "   BBB   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "    B    ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "    B    ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAGAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .where("A", Predicates.blocks(GTLBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where("B", Predicates.blocks(GCyMBlocks.CASING_STRESS_PROOF.get()))
                    .where("C", Predicates.blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where("D", Predicates.blocks(GTLBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where("E", Predicates.blocks(GTBlocks.MACHINE_CASING_UV.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where("G", Predicates.controller(Predicates.blocks(definition.get())))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/lafium_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_extractor"))
            .register();

    public final static MultiblockMachineDefinition DISASSEMBLY = REGISTRATE.multiblock("disassembly", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.DISASSEMBLY_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.disassembly")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.PROCESS_MACHINE_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAA", "AAA", "AAA")
                    .aisle("AAA", "ABA", "AAA")
                    .aisle("AAA", "A~A", "AAA")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.PROCESS_MACHINE_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("B", Predicates.blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/process_machine_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public final static MultiblockMachineDefinition ELEMENT_COPYING = REGISTRATE.multiblock("element_copying", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.ELEMENT_COPYING_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.element_copying")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.MOLECULAR_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE ~ EAA   ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("FAB         BAF", "FCB         BCF", "AA           AA")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE   EAA   ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(5).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where("B", Predicates.blocks(GTLBlocks.HYPER_CORE.get()))
                    .where("C", Predicates.blocks(GTLBlocks.MOLECULAR_COIL.get()))
                    .where("D", Predicates.blocks(GTLBlocks.HOLLOW_CASING.get()))
                    .where("E", Predicates.blocks(GTLBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where("F", Predicates.blocks(GCyMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition ATOMIC_ENERGY_EXCITATION_PLANT = REGISTRATE.multiblock("atomic_energy_excitation_plant", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeType(GTLRecipeTypes.ATOMIC_ENERGY_EXCITATION_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.atomic_energy_excitation")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("DDD             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("DDD     AAA     DDD", "D#D   AAFGFAA   E#E", "E#E  AHHAHAHHA  E#E", "E#E AHAAAHAAAHA E#E", "E#E AHA AIA AHA A#A", "AHAAFA B###B AFAAHA", "AFHHGA C#J#C AGHHFA", " AAAFA B###B AFAAA ", "    AHA AIA AHA    ", "    AHAAAHAAAHA    ", "     AHHAHAHHA     ", "      AAFGFAA      ", "        AAA        ")
                    .aisle("D~D             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where("C", Predicates.heatingCoils())
                    .where("D", Predicates.blocks(GTLBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where("E", Predicates.blocks(GTLBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where("F", Predicates.blocks(GTLBlocks.ACCELERATED_PIPELINE.get()))
                    .where("G", Predicates.blocks(GTLBlocks.RESTRAINT_DEVICE.get()))
                    .where("H", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("I", Predicates.blocks(GTLBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where("J", Predicates.blocks(GTLBlocks.AGGREGATIONE_CORE.get()))
                    .where(" ", Predicates.any())
                    .where("#", Predicates.air())
                    .build())
            .beforeWorking((machine, recipe) -> recipe.data.getInt("ebf_temp") <= ((CoilWorkableElectricMultiblockMachine) machine).getCoilType().getCoilTemperature())
            .additionalDisplay(GTLMachines.TEMPERATURE)
            .workableCasingRenderer(GTLCore.id("block/casings/dimensionally_transcendent_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition FLOTATION_CELL_REGULATOR = REGISTRATE.multiblock("flotation_cell_regulator", WorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.FLOTATING_BENEFICIATION_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.flotation_cell_regulator.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.flotating_beneficiation")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.HASTELLOY_N_75_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("  AAA  ", " AAAAA ", "AAAAAAA", "AAAAAAA", "AAAAAAA", " AAAAA ", "  AAA  ")
                    .aisle("  AAA  ", " AADAA ", "AADDDAA", "ADDDDDA", "AADDDAA", " AADAA ", "  AAA  ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "       ", "   E   ", "  E~E  ", "   E   ", "       ", "       ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("D", Predicates.blocks(GTLBlocks.HASTELLOY_N_75_GEARBOX.get()))
                    .where("B", Predicates.blocks(GTLBlocks.FLOTATION_CELL.get()))
                    .where("A", Predicates.blocks(GTLBlocks.HASTELLOY_N_75_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("C", Predicates.blocks(GTLBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where("E", Predicates.blocks(GTLBlocks.HASTELLOY_N_75_CASING.get()))
                    .where(" ", Predicates.any())
                    .where("#", Predicates.air())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/hastelloy_n_75_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public final static MultiblockMachineDefinition VACUUM_DRYING_FURNACE = REGISTRATE.multiblock("vacuum_drying_furnace", CoilWorkableElectricMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.VACUUM_DRYING_RECIPES)
            .recipeType(GTLRecipeTypes.DEHYDRATOR_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.vacuum_drying_furnace.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.0"),
                    Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.1"),
                    Component.translatable("gtceu.machine.electric_blast_furnace.tooltip.2"))
            .tooltips(Component.translatable("gtlcore.machine.vacuum_drying_furnace.tooltip.1"))
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_2.tooltip",
                    Component.translatable("gtceu.vacuum_drying"), Component.translatable("gtceu.dehydrator")))
            .recipeModifier((machine, recipe, params, result) -> {
                if (machine instanceof CoilWorkableElectricMultiblockMachine coilMachine && coilMachine.getRecipeType() == GTRecipeTypes.get("dehydrator")) {
                    GTRecipe recipe1 = GTRecipeModifiers.accurateParallel(coilMachine, recipe, Math.min(2147483647, (int) Math.pow(2, coilMachine.getCoilType().getCoilTemperature() / 900D)), false).getFirst();
                    if (recipe1 != null) {
                        return RecipeHelper.applyOverclock(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK, recipe1, coilMachine.getOverclockVoltage(), params, result);
                    }
                } else {
                    return GTRecipeModifiers.ebfOverclock(machine, recipe, params, result);
                }
                return null;
            })
            .appearanceBlock(GTLBlocks.RED_STEEL_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAA", "BBB", "BBB", "BBB", "AAA")
                    .aisle("AAA", "B B", "B B", "B B", "ACA")
                    .aisle("A~A", "BBB", "BBB", "BBB", "AAA")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("C", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
                    .where("A", Predicates.blocks(GTLBlocks.RED_STEEL_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("B", Predicates.heatingCoils())
                    .where(" ", Predicates.air())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller instanceof CoilWorkableElectricMultiblockMachine coilMachine && controller.isFormed()) {
                    if (coilMachine.getRecipeType() == GTLRecipeTypes.DEHYDRATOR_RECIPES) {
                        components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal(FormattingUtil.formatNumbers(Math.min(2147483647, (int) Math.pow(2, coilMachine.getCoilType().getCoilTemperature() / 900D)))).withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                    }
                    components.add(Component.translatable("gtceu.multiblock.blast_furnace.max_temperature",
                            Component.translatable(FormattingUtil.formatNumbers(coilMachine.getCoilType().getCoilTemperature() + 100L * Math.max(0, coilMachine.getTier() - GTValues.MV)) + "K")
                                    .setStyle(Style.EMPTY.withColor(ChatFormatting.RED))));
                }
            })
            .workableCasingRenderer(GTLCore.id("block/casings/red_steel_casing/top"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public final static MultiblockMachineDefinition MEGA_FLUID_HEATER = REGISTRATE.multiblock("mega_fluid_heater", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.FLUID_HEATER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.mega_fluid_heater"))
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.fluid_heater")))
            .appearanceBlock(GTLBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("           ", "           ", "           ", "   AAAAA   ", "   BBBBB   ", "   BBBBB   ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("           ", "   AAAAA   ", "   AAAAA   ", "  ACCCCCA  ", "  B     B  ", "  B     B  ", "  ACCCCCA  ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("   AAAAA   ", "  ACCCCCA  ", "  ACCCCCA  ", " ACDDDDDCA ", " B       B ", " B       B ", " AC     CA ", "  ACCCCCA  ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "    EEE    ", "    EEE    ", "           ")
                    .aisle("  AAAAAAA  ", " ACCCCCCCA ", " ACDDDDDCA ", "ACD FFF DCA", "B   F F   B", "B   F F   B", "AC  F F  CA", " AC FFF CA ", "  A FFF A  ", "   AAAAA   ", "    ABA    ", "    ABA    ", "    ABA    ", "    EEE    ", "   EGGGE   ", "   EGGGE   ", "    GGG    ")
                    .aisle("  AAAAAAA  ", " ACCCCCCCA ", " ACDHHHDCA ", "ACDFHHHFDCA", "B  FHHHF  B", "B  FHHHF  B", "AC FHHHF CA", " ACFHHHFCA ", "  AFHHHFA  ", "   AHHHA   ", "   A   A   ", "   A   A   ", "   A   A   ", "   EGGGE   ", "  EGGGGGE  ", "  EGGGGGE  ", "   GGGGG   ")
                    .aisle("  AAAAAAA  ", " ACCCCCCCA ", " ACDH HDCA ", "ACDFH HFDCA", "B   H H   B", "B   H H   B", "AC  H H  CA", " ACFH HFCA ", "  AFH HFA  ", "   AH HA   ", "   B   B   ", "   B   B   ", "   B   B   ", "   EGGGE   ", "  EGGGGGE  ", "  EGGGGGE  ", "   GGGGG   ")
                    .aisle("  AAAAAAA  ", " ACCCCCCCA ", " ACDHHHDCA ", "ACDFHHHFDCA", "B  FHHHF  B", "B  FHHHF  B", "AC FHHHF CA", " ACFHHHFCA ", "  AFHHHFA  ", "   AHHHA   ", "   A   A   ", "   A   A   ", "   A   A   ", "   EGGGE   ", "  EGGGGGE  ", "  EGGGGGE  ", "   GGGGG   ")
                    .aisle("  AAAAAAA  ", " ACCCCCCCA ", " ACDDDDDCA ", "ACD FFF DCA", "B   F F   B", "B   F F   B", "AC  F F  CA", " AC FFF CA ", "  A FFF A  ", "   AAAAA   ", "    ABA    ", "    ABA    ", "    ABA    ", "    EEE    ", "   EGGGE   ", "   EGGGE   ", "    GGG    ")
                    .aisle("   AAAAA   ", "  ACCCCCA  ", "  ACCCCCA  ", " ACDDDDDCA ", " B       B ", " B       B ", " AC     CA ", "  ACCCCCA  ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "    EEE    ", "    EEE    ", "    E~E    ")
                    .aisle("           ", "   AAAAA   ", "   AAAAA   ", "  ACCCCCA  ", "  B     B  ", "  B     B  ", "  ACCCCCA  ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("           ", "           ", "           ", "   AAAAA   ", "   BBBBB   ", "   BBBBB   ", "   AAAAA   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("G", Predicates.blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where("A", Predicates.blocks(GTLBlocks.MOLECULAR_CASING.get()))
                    .where("H", Predicates.heatingCoils())
                    .where("D", Predicates.blocks(GTLBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where("C", Predicates.blocks(GTLBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where("F", Predicates.blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where("E", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where(" ", Predicates.any())
                    .build())
            .additionalDisplay(GTLMachines.COIL_PARALLEL)
            .workableCasingRenderer(GTLCore.id("block/casings/iridium_casing"), GTCEu.id("block/machines/fluid_heater"))
            .register();

    public final static MultiblockMachineDefinition ELECTRIC_IMPLOSION_COMPRESSOR = REGISTRATE
            .multiblock("electric_implosion_compressor", WorkableElectricMultiblockMachine::new)
            .langValue("Electric Implosion Compressor")
            .tooltips(Component.translatable("gtlcore.machine.eut_multiplier.tooltip", 0.8))
            .tooltips(Component.translatable("gtlcore.machine.duration_multiplier.tooltip", 0.6))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.electric_implosion_compressor")))
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH,
                    GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXXXX", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "XXMXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXSXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .where('S', Predicates.controller(Predicates.blocks(definition.get())))
                    .where('X',
                            Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(40)
                                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                                    .or(Predicates.autoAbilities(true, false, true)))
                    .where('P', Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('G', Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('A', Predicates.air())
                    .where('#', Predicates.any())
                    .where('M', Predicates.blocks(GTMachines.MUFFLER_HATCH[GTValues.LuV].get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"),
                    GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public final static MultiblockMachineDefinition STELLAR_FORGE = REGISTRATE.multiblock("stellar_forge", (holder) -> new TierCasingMachine(holder, "SCTier"))
            .rotationState(RotationState.NON_Y_AXIS)
            .allowExtendedFacing(false)
            .recipeType(GTLRecipeTypes.STELLAR_FORGE_RECIPES)
            .tooltips(Component.translatable("gtceu.machine.perfect_oc"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.stellar_forge")))
            .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GCyMBlocks.CASING_ATOMIC)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("               ", "      bbb      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      bbb      ", "bc   ddddd   cb", "   cd     dc   ", "    d     d    ", "    d     d    ", "    d     d    ", "   cd     dc   ", "bc   ddddd   cb", "      bbb      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("               ", "      bab      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("b", Predicates.blocks(GCyMBlocks.CASING_ATOMIC.get())
                            .setMinGlobalLimited(150)
                            .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("c", Predicates.blocks(GTBlocks.FUSION_COIL.get()))
                    .where("d", GTLPredicates.createTierPredicate(GTLBlocks.scmap, "SCTier"))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/atomic_casing"), GTCEu.id("block/multiblock/electric_blast_furnace"))
            .register();

    public final static MultiblockMachineDefinition COMPONENT_ASSEMBLY_LINE = REGISTRATE.multiblock("component_assembly_line", (holder) -> new TierCasingMachine(holder, "CATier"))
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.COMPONENT_ASSEMBLY_LINE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.component_assembly_line")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.IRIDIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "A  NNN  A", "A       A", "A       A", "A       A", "A       A", "AA     AA", " AAAAAAA ", "         ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F  M M  F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "A  B B  A", "A  CCC  A", "A  CCC  A", "A       A", "A       A", "AA DDD AA", " AAD~DAA ", "   DDD   ", "         ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)))
                    .where("C", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)))
                    .where("D", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("F", Predicates.blocks(GTLBlocks.HSSS_REINFORCED_BOROSILICATE_GLASS.get()))
                    .where("G", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("H", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(Predicates.abilities(PartAbility.INPUT_LASER).setMaxGlobalLimited(1)))
                    .where("I", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTLMaterials.HastelloyN)))
                    .where("J", Predicates.blocks(GTLBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where("K", GTLPredicates.createTierPredicate(GTLBlocks.calmap, "CATier"))
                    .where("L", Predicates.blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where("M", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where("N", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public final static MultiblockMachineDefinition ADVANCED_INTEGRATED_ORE_PROCESSOR = REGISTRATE.multiblock("advanced_integrated_ore_processor", WorkableElectricMultipleRecipesMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTLRecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(Component.translatable("gtlcore.machine.integrated_ore_processor.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.advanced_integrated_ore_processor.tooltip.0"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.integrated_ore_processor")))
            .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern((definition) -> FactoryBlockPattern.start()
                    .aisle("    AAAAAAAAAA ", "    AAAGGGGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "   AAAAGHHGAAAA", "     AAGHHGAA  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("   AAAAAAAAAAAA", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "    A        A ", "   AAA      AAA", "     A      A  ", "      AGGGGA   ")
                    .aisle("IIIAAAAAAAAAAAA", "IIIBADEE  EEDAB", "IIIBADEE  EEDAB", "IIIBADEE  EEDAB", "IIIBADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("IIIAAAAAAAAAAAA", "IDIBADEE  EEDAB", "IDIBADEE  EEDAB", "IDIBADEE  EEDAB", "IIIBADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   BADEE  EEDAB", "   AAAFF  FFAAA", "     AFF  FFA  ", "      AGCCGA   ")
                    .aisle("III AAAAAAAAAA ", "III AAAGGGGAAA ", "I~I AAAGHHGAAA ", "III AAAGHHGAAA ", "III AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "    AAAGHHGAAA ", "   AAAAGHHGAAAA", "     AAGHHGAA  ", "      AGGGGA   ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where("B", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSS)))
                    .where("C", Predicates.blocks(GTLBlocks.RESTRAINT_DEVICE.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("E", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("F", Predicates.blocks(GTBlocks.CASING_GRATE.get()))
                    .where("G", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where("H", Predicates.blocks(GTLBlocks.HSSS_REINFORCED_BOROSILICATE_GLASS.get()))
                    .where("I", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(Predicates.abilities(PartAbility.INPUT_LASER))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS)))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public final static MultiblockMachineDefinition DIMENSIONALLY_TRANSCENDENT_STEAM_BOILER = REGISTRATE.multiblock("dimensionally_transcendent_steam_boiler", holder -> new LargeBoilerMachine(holder, 4096000, 32))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.LARGE_BOILER_RECIPES)
            .tooltips(Component.translatable("gtceu.multiblock.large_boiler.max_temperature", 4096000 + 274.15, 4096000))
            .tooltips(Component.translatable("gtceu.multiblock.large_boiler.heat_time_tooltip", 4096000 / 32 / 20))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("gtceu.large_boiler")))
            .recipeModifier(LargeBoilerMachine::recipeModifier)
            .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> GTLMachines.DTPF.where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("e", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(16).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where("b", Predicates.blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where("C", Predicates.blocks(GCyMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where("d", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where("s", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/generator/large_tungstensteel_boiler"))
            .register();

    public final static MultiblockMachineDefinition DIMENSIONALLY_TRANSCENDENT_STEAM_OVEN = REGISTRATE.multiblock("dimensionally_transcendent_steam_oven", holder -> new LargeSteamParallelMultiblockMachine(holder, 524288))
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.FURNACE_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.dimensionally_transcendent_dirt_forge.tooltip.0"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_1.tooltip",
                    Component.translatable("compass.node.gtceu.steam/steam_furnace")))
            .recipeModifiers((machine, recipe, params, result) -> GTLRecipeModifiers.reduction(machine, recipe, 0.01, 1), (machine, recipe, params, result) -> LargeSteamParallelMultiblockMachine.recipeModifier(machine, recipe, 0))
            .appearanceBlock(GTBlocks.CASING_COKE_BRICKS)
            .pattern(definition -> GTLMachines.DTPF.where("a", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("e", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(Predicates.abilities(PartAbility.STEAM).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1)))
                    .where("b", Predicates.blocks(Blocks.BRICKS))
                    .where("C", Predicates.blocks(Blocks.DEEPSLATE))
                    .where("d", Predicates.blocks(Blocks.STONE_BRICKS))
                    .where("s", Predicates.blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where(" ", Predicates.any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_MULTI_SMELTER = REGISTRATE
            .multiblock("advanced_multi_smelter", CoilWorkableElectricMultipleRecipesMultiblockMachine::new)
            .rotationState(RotationState.ALL)
            .recipeTypes(GTLRecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .recipeTypes(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .recipeTypes(GTRecipeTypes.FURNACE_RECIPES)
            .appearanceBlock(GTLBlocks.HYPER_MECHANICAL_CASING)
            .tooltips(Component.translatable("gtlcore.machine.coil_parallel"))
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_3.tooltip",
                    Component.translatable("gtceu.liquefaction_furnace"), Component.translatable("gtceu.alloy_smelter"), Component.translatable("gtceu.electric_furnace")))
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("        AAAAAAAAAAAAAAAAAAA      ", "             ABBBBBBBA           ", "     C    C  AAAAAAAAA           ", "     C    C  ABBBBBBBA           ", "             AAAAAAAAA           ", "             ABBBBBBBA           ", "             AAAAAAAAA           ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("     CAAAAAAAAAAAAAAAAAAAAAAA    ", "     C    C  ADDDDDDDAEEEEE      ", "    FAAAAAAA AAAAAAAAAEGGGE      ", "    FAAAAAAA ADDDDDDDAEEEEE      ", "     C    C  AAAAAAAAA           ", "             ADDDDDDDA           ", "             AAAAAAAAA           ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("     AAAAAAAAAAAAAAAAAAAAAAAAA   ", "    FAAAAAAA ADDDDDDDAEEEEE      ", "    FAD D  A AAAAAAAAAEHHHE      ", "    FAAAAAAA ADDDDDDDAEGGGE      ", "    FAAAAAAA AAAAAAAAA           ", "     C    C  ADDDDDDDA           ", "           CCAAAAAAAAA           ", "           CC                    ", "           CC                    ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("    AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "    FAAAAAAACCCCCCCCD EEEEECCCC  ", "     ID D  A          EGGGE      ", "     I     A        D EEEEE      ", "    FAAAAAAA    JJJ              ", "    FAAAAAAAC  JJJJJD            ", "     C  JJJCCJJJJJJJJJJJJ        ", "        KKKJMKKKKKKKKKKKKJJ      ", "           CC                    ", "           CC                    ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "    FAAAAAAACCCCCCCCDCCCCCCCCCC  ", "     IDDDDDACCCCCCCCCCCCCCCCCCC  ", "     ID D  A        D            ", "    FAD D  A    JJJ              ", "    FAAAAAAAC  JLLLJD            ", "     C JJJJJJJJJJJJJJJJJJJ       ", "       KMMMMMMMMMMMMMMMMMMJJ     ", "        JJJJJJJJJJJJJJJJJJ       ", "           CC                    ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "    FAAAAAAA        D         I  ", "     ID D  ICCCCCCCCCCCCCCCCCCC  ", "     I     ICCCCCCCCDCCCCCCCCCC  ", "    FAAAAAAA    JJJ              ", "    FAAAAAAAC  JLLLJD            ", "     CJJJJJCCJJJJJJJJJJJJJJ      ", "      KMMJJJKLLLLLLLLLLLLL JJ    ", "       JJJJCCJJJJJJJJJJJJJJ      ", "           CC                    ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "    FAAAAAAA DDDDDDDDDDDDDDDDDI  ", "    FAD D  I        D         I  ", "    FAAAAAAACCCCCCCCDCCCCCCCCCC  ", "    FAAAAAAA    JJJ D            ", "     C         JLLLJD            ", "      JJJJ CC  JJJJJ     JJJ     ", "      KMJJ CCJJJJJJJJJJJJLL JJ   ", "       JJJ CC   CCC      JJJ     ", "               FFFFF             ", "               FFFFF             ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "     C                        I  ", "    FAAAAAAACCCCCCCCCCCCCCCCCCC  ", "    FAAAAAAACCCCCCCCCCCCCCCCCCC  ", "     C        A JJJ A            ", "              AJLLLJA            ", "      JJJ     AJLLLJA     JJJ    ", "      JMJ       CCC     JJLL B   ", "      JJJ      CC CC      JJJ    ", "              F     F            ", "              F O   F            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "     FFFFFFFCCCCCCCCCCCCCCCCCCC  ", "     FFFFFFFCCCCCCCCCCCCCCCCCCC  ", "     FFFFFFF  A     A            ", "     FFFFFFF  A JJJ A            ", "     FPPPFFF  AJLLLJA            ", "     PJJJP    AJLLLJA     JJJ    ", "     PJMJP     CBBBC     JDDDB   ", "      PPP     CC   CC     JJJ    ", "              F     F            ", "              F O OOF            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "    FFFFAFFFFCCCCCCCCCCCCCCCCCCAA", "    FFQQQQQFF A     A    AAAAAAAA", "    FFQ Q QFF A     A    AAAAAAA ", "    FFQQQQQFF A JJJ A    AAAAAA  ", "    FF     FF AJLLLJA     CCC    ", "     CCCCCCC  AJLLLJA    CCDCC   ", "     FFFFFFF   CBRBC     CDDDC   ", "     FFFFFFF  C  R  C    CCDCC   ", "        S     F  R  F     CCC    ", "              F  R  F            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "       SSS                       ", "      FFFFF                      ", "      FFFFF                      ", "       BBB                       ", "       BBB                       ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "   FFFFFAFFFFFA     A    FFFFFFFF", "   FF QQQQQ FFA     A    FFFFFFFF", "   FF Q Q Q FFA     A    FFFFFFFF", "   FF QQQQQ FFA JJJ A    FFFFFFF ", "   FF       FFA JJJ A    FRRRF   ", "    CCCCCCCCC AJJJJJA    RRDRR   ", "    FFFFFFFFF  CBBBC     RDDDR   ", "    FFFFFFFFF CC   CC    RRDRR   ", "    S KKSKK S F     F     RRR    ", "      KKSKK   FOO O F            ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "    S KKSKK S                    ", "    FFFFFFFFF                    ", "    FFFFFFFFF                    ", "      CCCCC                      ", "      CCCCC                      ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "  FFFFFFAFFFFFFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFF ", "  FF    T    FFA   A     FRRRF   ", "   CC   T   CC AJJJA     RRDRR   ", "   FF   T   FF  CCC      RDDDR   ", "   FFF  T  FFF CC CC     RRDRR   ", "   SSKK   KKSSF     F     RRR    ", "    SKK   KKS F   O F            ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "   SSKK   KKSS                   ", "   FFFFFFFFFFF                   ", "   FFFFFFFFFFF                   ", "     CCCCCCC                     ", "     CCCCCCC                     ", "      FFFFF                      ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFA        FFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFF ", " FF  Q  T  Q  FFAA       FRRRF   ", "  CC Q  T  Q CC AAA      RRDRR   ", "  FF Q  T  Q FF          RDDDR   ", "  FFFQ  T  QFFF CCC      RRDRR   ", "    KQQQQQQQK  FFFFF      RRR    ", "    KQ     QK  FFFFF             ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQ     QK                    ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQ     QK                    ", "   FFFFFFFFFFF                   ", "   FFFFFFFFFFF                   ", "    CC     CC                    ", "    CC     CC                    ", "      FTTTF                      ", "       TTT                       ", "       TTT                       ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFJJJJJJJJJFFFFFFFZ", " FQQQQQ T QQQQQQQQQQQQQQQFFFFFFFZ", " FQQQQQ T QQQQQQQQQQQQQQQFFFFFFFZ", " FQQQQQQTQQQQQQQQQQQQQQQQFFFFFFF ", " F     QTQ     FJJJJJJJJJFCCCF   ", "  CC   QTQ   CC          CCDCC   ", "  FF   QTQ   FF          CDDDC   ", "  FF   QTQ   FF          CCDCC   ", "   KKQ Q Q QKK            CCC    ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KK  Q Q  KK                   ", "  FFFF Q Q FFFF                  ", "  FFFFFQFQFFFFF                  ", "   CC QQQQQ CC                   ", "   CC QQQQQ CC                   ", "    FFTTTTTFF                    ", "      T   T                      ", "      T   T                      ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFJJJJJJJJJFFFFFFFZ", " FQQ    T    QQQQQQQQQQQQFFFFFFFZ", " F                       FFFFFFFZ", " FQQ  Q T Q  QQQQQQQQQQQQFFFFFFF ", " F    Q T Q    FJJJJJJJJJFPPPF   ", "  CC  Q T Q  CC          PPDPP   ", "  FF  Q T Q  FF          PDDDP   ", "  FF  Q T Q  FF          PPDPP   ", "   K QQ   QQ K            PPP    ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "  SK  Q   Q  KS                  ", "  FFFFQ   QFFFF                  ", "  FFFFQ F QFFFF                  ", "  BCC Q Q Q CCB                  ", "  BCC Q Q Q CCB                  ", "    FTTLTLTTF                    ", "     T     T                     ", "     T     T                     ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FAAAAAAFAAAAAAFJJJJJJJJJFFFFFFFZ", " FQQTTTTTTTTTQQQQQQQQQQQQFFFFFFF~", " FQQTTTTTTTTTQQQQQQQQQQQQFFFFFFFZ", " FQQTTTTTTTTTQQQQQQQQQQQQFFFFFFF ", " F  TTTTTTTTT  FJJJJJJJJJFPPPF   ", "  CCTTTTTTTTTCC          PPDPP   ", "  FFTTTTTTTTTFF          PDDDP   ", "  FFTTTTTTTTTFF          PPDPP   ", "  SS Q     Q SS           PPP    ", "   S         S                   ", "   S Q     Q S                   ", "   S         S                   ", "   S         S                   ", "   S Q     Q S                   ", "   S         S                   ", "   S Q     Q S                   ", "   S         S                   ", "  SS         SS                  ", "  FFFFF    FFFF                  ", "  FFFFFFFFFFFFF                  ", "  BCC QQQQQ CCB                  ", "  BCC QQQQQ CCB                  ", "    FTTTTTTTF                    ", "     T     T                     ", "     T     T                     ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFJJJJJJJJJFFFFFFFZ", " FQQ    T    QQQQQQQQQQQQFFFFFFFZ", " F                       FFFFFFFZ", " FQQ  Q T Q  QQQQQQQQQQQQFFFFFFF ", " F    Q T Q    FJJJJJJJJJFPPPF   ", "  CC  Q T Q  CC          PPDPP   ", "  FF  Q T Q  FF          PDDDP   ", "  FF  Q T Q  FF          PPDPP   ", "   K QQ   QQ K            PPP    ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "   K QQ   QQ K                   ", "   K  Q   Q  K                   ", "  SK  Q   Q  KS                  ", "  FFFFQ   QFFFF                  ", "  FFFFQ F QFFFF                  ", "  BCC Q Q Q CCB                  ", "  BCC Q Q Q CCB                  ", "    FTTLTLTTF                    ", "     T     T                     ", "     T     T                     ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFJJJJJJJJJFFFFFFFZ", " FQQQQQ T QQQQQQQQQQQQQQQFFFFFFFZ", " FQQQQQ T QQQQQQQQQQQQQQQFFFFFFFZ", " FQQQQQQTQQQQQQQQQQQQQQQQFFFFFFF ", " F     QTQ     FJJJJJJJJJFCCCF   ", "  CC   QTQ   CC          CCDCC   ", "  FF   QTQ   FF          CDDDC   ", "  FF   QTQ   FF          CCDCC   ", "   KKQ Q Q QKK            CCC    ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KKQ Q Q QKK                   ", "   KK  Q Q  KK                   ", "   KK  Q Q  KK                   ", "  FFFFFQ Q FFFF                  ", "  FFFFFQFQFFFFF                  ", "   CC QQQQQ CC                   ", "   CC QQQQQ CC                   ", "    FFTTTTTFF                    ", "      T   T                      ", "      T   T                      ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", " FFFFFFFAFFFFFFFA        FFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFFZ", " FF  QQ T QQ  FFJJJJJJJJJFFFFFFF ", " FF  Q  T  Q  FFAA       FRRRF   ", "  CC Q  T  Q CC AAAA     RRDRR   ", "  FF Q  T  Q FF          RDDDR   ", "  FFFQ  T  QFFF CCC      RRDRR   ", "    KQQQQQQQK  FFFFF      RRR    ", "    KQ     QK  FFFFF             ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQ     QK                    ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQQQQQQQK                    ", "    KQ     QK                    ", "    KQ     QK                    ", "   FFFFFFFFFFF                   ", "   FFFFFFFFFFF                   ", "    CC     CC                    ", "    CC     CC                    ", "      FTTTF                      ", "       TTT                       ", "       TTT                       ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "  FFFFFFAFFFFFFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFFF", "  FF  Q T Q  FFA         FFFFFFF ", "  FF    T    FFA   A     FRRRF   ", "   CC   T   CC A   A     RRDRR   ", "   FF   T   FF  CCC      RDDDR   ", "   FFF  T  FFF CC CC     RRDRR   ", "   SSKK   KKSSF     F     RRR    ", "    SKK   KKS F O   F            ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "    SKK   KKS                    ", "   SSKK   KKSS                   ", "   FFFFFFFFFFF                   ", "   FFFFFFFFFFF                   ", "     CCCCCCC                     ", "     CCCCCCC                     ", "      FFFFF                      ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "   FFFFFAFFFFFA     A    FFFFFFFF", "   FF QQQQQ FFA     A    FFFFFFFF", "   FF Q Q Q FFA     A    FFFFFFFF", "   FF QQQQQ FFA     A    FFFFFFF ", "   FF       FFAJJJJJA    FRRRF   ", "    CCCCCCCCC AJJJJJA    RRDRR   ", "    FFFFFFFFF  CBBBC     RDDDR   ", "    FFFFFFFFF CC   CC    RRDRR   ", "    S KKSKK S F     F     RRR    ", "      KKSKK   F O OOF            ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "      KKSKK                      ", "    S KKSKK S                    ", "    FFFFFFFFF                    ", "    FFFFFFFFF                    ", "      CCCCC                      ", "      CCCCC                      ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "    FFFFAFFFFCCCCCCCCCCCCCCCCCCAA", "    FFQQQQQFF A     A    AAAAAAAA", "    FFQ Q QFF A     A    AAAAAAA ", "    FFQQQQQFF A JJJJA    AAAAAA  ", "    FF     FF AJLLLJA     CCC    ", "     CCCCCCC  AJLLLJA    CCDCC   ", "     FFFFFFF   CBRBC     CDDDC   ", "     FFFFFFF  C  R  C    CCDCC   ", "        S     F  R  F     CCC    ", "              F  R  F            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "       SSS                       ", "      FFFFF                      ", "      FFFFF                      ", "       BBB                       ", "       BBB                       ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "     FFFFFFFCCCCCCCCCCCCCCCCCCC  ", "     FFFFFFFCCCCCCCCCCCCCCCCCCC  ", "     FFFFFFF  A     A            ", "     FFFFFFF  A JJJ A            ", "     FPPPFFF  AJLLLJA            ", "     PJJJP    AJLLLJA     JJJ    ", "     PJ JP     CBBBC     JLLLB   ", "      PPP     CC   CC     JJJ    ", "              F     F            ", "              FOO O F            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "     C                        I  ", "    FAAAAAAACCCCCCCCCCCCCCCCCCC  ", "    FAAAAAAACCCCCCCCCCCCCCCCCCC  ", "     C        A JJJ A            ", "            C AJLLLJA            ", "      JJJJJ C AJLLLJA     JJJ    ", "      JMJJJ C   CCC     JJL  B   ", "      JJJJ     CC CC      JJJ    ", "              F     F            ", "              F   O F            ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "    FAAAAAAA  DDDDDDDDDDDDDDDDI  ", "    F  D   I        D         I  ", "    FAAAAAAACCCCCCCCDCCCCCCCCCC  ", "    FAAAAAAAC   JJJ D            ", "     C         JLLLJD            ", "      JJJJJJJ  JJJJJA    JJJ     ", "      KMMJJJJJJJJJJJJJJJJLL JJ   ", "       JJJJJC   CCC      JJJ     ", "               FFFFF             ", "               FFFFF             ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "    FAAAAAAI        D         I  ", "     I D  DICCCCCCCCCCCCCCCCCCC  ", "     I     ICCCCCCCCDCCCCCCCCCC  ", "    FAAAAAAAC   JJJ              ", "    FAAAAAAA   JLLLJD            ", "     CJJJJJJJJJJJJJJJJJJJJJ      ", "      KKMMMMMLLLLLLLLLLLLLLJJ    ", "        JJJJCJJJJJJJJJJJJJJ      ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", "    FAAAAAAACCCCCCCCDCCCCCCCCCC  ", "     IDDDDDACCCCCCCCCCCCCCCCCCC  ", "     I D  DA        D            ", "    FAAD  DAC   JJJ              ", "    FAAAAAAA   JLLLJD            ", "     C  JJJJJJJJJJJJJJJJJJ       ", "        KKKKKMMMMMMMMMMMMMJJ     ", "            CJJJJJJJJJJJJJ       ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("    AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "    FAAAAAAACCCCCCCCDCEEEEECCCC  ", "     I D  DA          EGGGE      ", "     I     A        D EEEEE      ", "    FAAAAAAA    JJJ              ", "    FAAAAAAAC  JJJJJD            ", "     C    C CJJJJJJJJJJJJ        ", "            CKKKKKKKKKKKKJJ      ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("     AAAAAAAAAAAAAAAAAAAAAAAAA   ", "    FAAAAAAA ADDDDDDDAEEEEE      ", "    F  D   A AAAAAAAAAEHHHE      ", "    FAAAAAAA ADDDDDDDAEGGGE      ", "    FAAAAAAA AAAAAAAAA           ", "     C    C  ADDDDDDDA           ", "             AAAAAAAAA           ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("     CAAAAAAAAAAAAAAAAAAAAAAA    ", "     C    C  ADDDDDDDAEEEEE      ", "    FAAAAAAA AAAAAAAAAEGGGE      ", "    FAAAAAAA ADDDDDDDAEEEEE      ", "     C    C  AAAAAAAAA           ", "             ADDDDDDDA           ", "             AAAAAAAAA           ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .aisle("        AAAAAAAAAAAAAAAAAAA      ", "             ABBBBBBBA           ", "     C    C  AAAAAAAAA           ", "     C    C  ABBBBBBBA           ", "             AAAAAAAAA           ", "             ABBBBBBBA           ", "             AAAAAAAAA           ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ", "                                 ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("T", Predicates.blocks(GTLBlocks.STELLAR_CONTAINMENT_CASING.get()))
                    .where("G", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where("K", Predicates.blocks(GTBlocks.FUSION_GLASS.get()))
                    .where("F", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where("Z", Predicates.blocks(GTLBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE)))
                    .where("E", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where("A", Predicates.blocks(GCyMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where("J", Predicates.blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where("O", Predicates.blocks(GTBlocks.MACHINE_CASING_HV.get()))
                    .where("M", Predicates.air())
                    .where("Q", Predicates.heatingCoils())
                    .where("L", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("P", Predicates.blocks(GCyMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where("B", Predicates.blocks(GCyMBlocks.HEAT_VENT.get()))
                    .where("D", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where("I", Predicates.blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where("R", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("C", Predicates.blocks(GTLBlocks.CASING_SUPERCRITICAL_TURBINE.get()))
                    .where("H", Predicates.blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where("S", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where(' ', Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .beforeWorking((machine, recipe) -> machine instanceof CoilWorkableElectricMultipleRecipesMultiblockMachine coilMachine && coilMachine.getCoilType().getCoilTemperature() >= recipe.data.getInt("ebf_temp"))
            .additionalDisplay((controller, components) -> {
                if (controller instanceof CoilWorkableElectricMultipleRecipesMultiblockMachine coilMachine && controller.isFormed()) {
                    components.add(Component.translatable("gtceu.multiblock.blast_furnace.max_temperature",
                            Component.translatable(FormattingUtil.formatNumbers(coilMachine.getCoilType().getCoilTemperature()) + "K")
                                    .setStyle(Style.EMPTY.withColor(ChatFormatting.RED))));
                    components.add(Component.translatable("gtceu.multiblock.parallel", Component.literal(FormattingUtil.formatNumbers(coilMachine.getParallel())).withStyle(ChatFormatting.DARK_PURPLE)).withStyle(ChatFormatting.GRAY));
                }
            })
            .register();

    public final static MultiblockMachineDefinition MAGE_ASSEMBLER = REGISTRATE.multiblock("mage_assembler", WorkableElectricParallelHatchMultipleRecipesMachine::new)
            .rotationState(RotationState.ALL)
            .recipeType(GTRecipeTypes.ASSEMBLER_RECIPES)
            .recipeType(GTLRecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .recipeType(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .tooltips(Component.translatable("gtlcore.machine.laser.tooltip"))
            .tooltips(Component.translatable("gtlcore.machine.multiple_recipes.tooltip"))
            .tooltips(Component.translatable("gtceu.multiblock.parallelizable.tooltip"))
            .tooltips(Component.translatable("gtceu.machine.available_recipe_map_3.tooltip",
                    Component.translatable("gtceu.assembler"), Component.translatable("gtceu.precision_assembler"), Component.translatable("gtceu.circuit_assembler")))
            .recipeModifiers(GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK_SUBTICK))
            .appearanceBlock(GTLBlocks.IRIDIUM_CASING)
            .pattern((definition) -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "   A   AA AA   A   ", "   A   AA AA   A   ", "       AA AA       ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", " CCCCCCCCCCCCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "  ACCCCCCCCCCCCCA  ", "   CCCCCCCCCCCCC   ", "   A CCCCCCCCC A   ", "       AA AA       ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCT   TCCCCCCC", " JCCCCCT   TCCCCCJ ", "CCCCCCCT   TCCCCCCC", " CCCCCCT   TCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "   CCCCCCCCCCCCC   ", "   CCCCCCCCCCCCC   ", "     CCCCCCCCC     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC I   ICCCI   I CC", "CC I   I H I   I CC", " J I   I   I   I J ", "CC I   I   I   I CC", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC    O CCC O    CC", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC    E     E    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I    CCC    I CC", "CC I     H     I CC", " J I           I J ", "CC I  E     E  I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC    O CCC O    CC", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CC", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DS CCC SD   CC", "CC   DS  H  SD   CC", " J    S     S    J ", "CC    S     S    CC", " CC   SSSSSSS   CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I DE CCC ED I CC", "CC I DE  H  ED I CC", " J I DE     ED I J ", "CC I DE     ED I CC", " CCI DEEEEEEED ICC ", " EJJ  DDDDDDD  JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DD CCC DD   CC", "CC   DD  H  DD   CC", "CC    J     J    CC", "CC    J     J    CC", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DE CCC ED   CC", "CC   DE  H  ED   CC", "CC   DE     ED   CC", "CC   DE     ED   CC", " CC  DEEEEEEED  CC ", " DD   DDDDDDD   DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I DS CCC SD I C ", "SG I DS  H  SD I GS", " G I  S     S  I G ", "SC I  S     S  I CS", " CCI  SSSSSSS  ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "SC   L  CCC  L   CS", "SG   L   H   L   GS", " G   L  R R  L   G ", "SC   L  R R  L   CS", " CC  FLFR RFLF  CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I    CCC    I C ", " G I     H     I G ", " G I           I G ", "SC I           I CS", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "SC      CCC      CS", "SG       H       GS", "SG               GS", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C   Q  CCC  Q   C ", " G   Q   H   Q   G ", " G   Q  R R  Q   G ", " C   FRRR RRRF   C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", " C               C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I Q  CCC  Q I CB", "CC I Q   H   Q I CC", "CC I Q  R R  Q I CC", "CC I FRRR RRRF I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC    O CCC O    CB", "ED    O  H  O    DE", "ED    FF   FF    DE", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC      CCC      CB", " D       H       DB", " D               DB", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC I  O CCC O  I CB", " D I  O  H  O  I DB", " D I  FF   FF  I DB", "JC I           I CJ", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", " D       H       D~", " D               DB", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", " D       H       DB", " D               DB", "JC     LM ML     CJ", " CC    L   L    CC ", " DD    L   L    DD ", " DD    CCCCC    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", "ED       H       DE", "ED               DE", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC I   ICCCI   I CB", " D I   I H I   I D ", " D I   I   I   I D ", "JC I   I   I   I CJ", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CC      CCC      CB", "CC       H       CC", "CC               CC", "CC               CC", " CCD           DCC ", " FDD           DDF ", "  FD           DF  ", "   FD         DF   ", "    FDDDDDDDDDF    ", "     FCCCCCCCF     ", "       CCCCC       ", "                   ")
                    .aisle("AAAAAGGGDDDGGGAAAAA", " CC             CC ", " DD             DD ", " DD             DD ", " CC             CC ", " CCD           DCC ", " CDD           DDC ", "  CD           DC  ", "   CD         DC   ", "    CDDDDDDDDDC    ", "     CCCCCCCCC     ", "       CCCCC       ", "                   ")
                    .aisle(" AAAAAAAAAAAAAAAAA ", "  CCFDCC   CCDFCC  ", "  DDFDCC   CCDFDD  ", "  DDFDCC   CCDFDD  ", "  CCFDCC   CCDFCC  ", "  DDFDCCCCCCCDFDD  ", "  DDFDDDDDDDDDFDD  ", "  EDFDDDDDDDDDFDE  ", "   EDFFFFFFFFFDE   ", "    EDDDDDDDDDE    ", "     ECCCCCCCE     ", "        CCC        ", "                   ")
                    .aisle("  AAAAAAAAAAAAAAA  ", "   C  CC   CC  C   ", "   D  CC   CC  D   ", "   D  CC   CC  D   ", "   C  CC   CC  C   ", "   C  CCCCCCC  C   ", "   C           C   ", "   CC         CC   ", "    CCEEEEEEECC    ", "     CCCCCCCCC     ", "        CCC        ", "                   ", "                   ")
                    .where("~", Predicates.controller(Predicates.blocks(definition.get())))
                    .where("A", Predicates.blocks(GTLBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where("B", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get())
                            .or(GTLPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                    .where("C", Predicates.blocks(GTLBlocks.IRIDIUM_CASING.get()))
                    .where("D", Predicates.blocks(GTLBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where("E", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where("F", Predicates.blocks(GTLBlocks.NEUTRONIUM_GEARBOX.get()))
                    .where("G", Predicates.blocks(GCyMBlocks.CASING_NONCONDUCTING.get()))
                    .where("H", Predicates.blocks(GTLBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where("I", Predicates.blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where("J", Predicates.blocks(GTBlocks.FILTER_CASING.get()))
                    .where("K", Predicates.blocks(GTBlocks.LAMPS.get(DyeColor.WHITE).get()))
                    .where("L", Predicates.blocks(GTLBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where("M", Predicates.blocks(GTLBlocks.PROCESS_MACHINE_CASING.get()))
                    .where("O", Predicates.blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where("P", Predicates.blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where("Q", Predicates.blocks(GTLBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where("R", Predicates.blocks(Blocks.IRON_BARS))
                    .where("S", Predicates.blocks(GTLBlocks.NEUTRONIUM_PIPE_CASING.get()))
                    .where("T", Predicates.blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where(' ', Predicates.any())
                    .build())
            .workableCasingRenderer(GTLCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();
}
